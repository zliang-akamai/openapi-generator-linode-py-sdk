# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_firewall_devices200_response_data_inner import GetFirewallDevices200ResponseDataInner

class TestGetFirewallDevices200ResponseDataInner(unittest.TestCase):
    """GetFirewallDevices200ResponseDataInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetFirewallDevices200ResponseDataInner:
        """Test GetFirewallDevices200ResponseDataInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetFirewallDevices200ResponseDataInner`
        """
        model = GetFirewallDevices200ResponseDataInner()
        if include_optional:
            return GetFirewallDevices200ResponseDataInner(
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                entity = openapi_client.models.get_firewall_devices_200_response_data_inner_entity.get_firewall_devices_200_response_data_inner_entity(
                    id = 123, 
                    label = 'my-linode', 
                    type = 'linode', 
                    url = '/v4/linode/instances/123', ),
                id = 123,
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return GetFirewallDevices200ResponseDataInner(
        )
        """

    def testGetFirewallDevices200ResponseDataInner(self):
        """Test GetFirewallDevices200ResponseDataInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
