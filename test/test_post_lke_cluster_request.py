# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.post_lke_cluster_request import PostLkeClusterRequest

class TestPostLkeClusterRequest(unittest.TestCase):
    """PostLkeClusterRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostLkeClusterRequest:
        """Test PostLkeClusterRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostLkeClusterRequest`
        """
        model = PostLkeClusterRequest()
        if include_optional:
            return PostLkeClusterRequest(
                control_plane = openapi_client.models.get_lke_clusters_200_response_data_inner_control_plane.get_lke_clusters_200_response_data_inner_control_plane(
                    acl = openapi_client.models.get_lke_clusters_200_response_data_inner_control_plane_acl.get_lke_clusters_200_response_data_inner_control_plane_acl(
                        addresses = openapi_client.models.get_lke_clusters_200_response_data_inner_control_plane_acl_addresses.get_lke_clusters_200_response_data_inner_control_plane_acl_addresses(
                            ipv4 = ["203.0.113.1","192.0.2.0/24"], 
                            ipv6 = ["2001:db8:1234:abcd::/64"], ), 
                        enabled = True, 
                        revision_id = '20240127r001', ), 
                    high_availability = True, ),
                k8s_version = '1.27',
                label = 'lkecluster12345',
                node_pools = [
                    openapi_client.models.post_lke_cluster_request_node_pools_inner.post_lke_cluster_request_node_pools_inner(
                        autoscaler = openapi_client.models.post_lke_cluster_request_node_pools_inner_autoscaler.post_lke_cluster_request_node_pools_inner_autoscaler(
                            enabled = True, 
                            max = 12, 
                            min = 3, ), 
                        count = 6, 
                        disks = [
                            openapi_client.models.post_lke_cluster_request_node_pools_inner_disks_inner.post_lke_cluster_request_node_pools_inner_disks_inner(
                                size = 1024, 
                                type = 'ext4', )
                            ], 
                        labels = {"example.com/my-app":"teams"}, 
                        tags = ["example tag","another example"], 
                        taints = [{"effect":"NoSchedule","key":"example.com/my-app","value":"teamA"},{"effect":"NoExecute","key":"myapp.io/team","value":"teamB"}], 
                        type = 'g6-standard-4', )
                    ],
                region = 'us-central',
                tags = ["ecomm","blogs"]
            )
        else:
            return PostLkeClusterRequest(
                k8s_version = '1.27',
                label = 'lkecluster12345',
                node_pools = [
                    openapi_client.models.post_lke_cluster_request_node_pools_inner.post_lke_cluster_request_node_pools_inner(
                        autoscaler = openapi_client.models.post_lke_cluster_request_node_pools_inner_autoscaler.post_lke_cluster_request_node_pools_inner_autoscaler(
                            enabled = True, 
                            max = 12, 
                            min = 3, ), 
                        count = 6, 
                        disks = [
                            openapi_client.models.post_lke_cluster_request_node_pools_inner_disks_inner.post_lke_cluster_request_node_pools_inner_disks_inner(
                                size = 1024, 
                                type = 'ext4', )
                            ], 
                        labels = {"example.com/my-app":"teams"}, 
                        tags = ["example tag","another example"], 
                        taints = [{"effect":"NoSchedule","key":"example.com/my-app","value":"teamA"},{"effect":"NoExecute","key":"myapp.io/team","value":"teamB"}], 
                        type = 'g6-standard-4', )
                    ],
                region = 'us-central',
        )
        """

    def testPostLkeClusterRequest(self):
        """Test PostLkeClusterRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
