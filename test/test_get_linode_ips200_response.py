# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_linode_ips200_response import GetLinodeIps200Response

class TestGetLinodeIps200Response(unittest.TestCase):
    """GetLinodeIps200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLinodeIps200Response:
        """Test GetLinodeIps200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLinodeIps200Response`
        """
        model = GetLinodeIps200Response()
        if include_optional:
            return GetLinodeIps200Response(
                ipv4 = openapi_client.models.get_linode_ips_200_response_ipv4.get_linode_ips_200_response_ipv4(
                    private = [
                        openapi_client.models.get_linode_ips_200_response_ipv4_private_inner.get_linode_ips_200_response_ipv4_private_inner(
                            address = '192.168.133.234', 
                            gateway = '', 
                            linode_id = 123, 
                            prefix = 17, 
                            public = False, 
                            rdns = '', 
                            region = 'us-east', 
                            subnet_mask = '255.255.128.0', 
                            type = 'ipv4', )
                        ], 
                    public = [
                        openapi_client.models.get_linode_ips_200_response_ipv4_public_inner.get_linode_ips_200_response_ipv4_public_inner(
                            address = '97.107.143.141', 
                            gateway = '97.107.143.1', 
                            linode_id = 123, 
                            prefix = 24, 
                            rdns = 'test.example.org', 
                            region = 'us-east', 
                            subnet_mask = '255.255.255.0', 
                            type = 'ipv4', 
                            vpc_nat_1_1 = openapi_client.models.get_linode_ips_200_response_ipv4_public_inner_vpc_nat_1_1.get_linode_ips_200_response_ipv4_public_inner_vpc_nat_1_1(
                                address = '192.168.0.42', 
                                subnet_id = 101, 
                                vpc_id = 111, ), )
                        ], 
                    reserved = [
                        openapi_client.models.get_linode_ips_200_response_ipv4_public_inner.get_linode_ips_200_response_ipv4_public_inner(
                            address = '97.107.143.141', 
                            gateway = '97.107.143.1', 
                            linode_id = 123, 
                            prefix = 24, 
                            rdns = 'test.example.org', 
                            region = 'us-east', 
                            subnet_mask = '255.255.255.0', 
                            type = 'ipv4', )
                        ], 
                    shared = [
                        
                        ], 
                    vpc = [
                        openapi_client.models.get_linode_ips_200_response_ipv4_vpc_inner.get_linode_ips_200_response_ipv4_vpc_inner(
                            active = True, 
                            address = '192.0.2.141', 
                            address_range = '', 
                            config_id = 4567, 
                            gateway = '192.0.2.1', 
                            interface_id = 2435, 
                            linode_id = 123, 
                            nat_1_1 = '192.168.0.42', 
                            prefix = 24, 
                            region = 'us-east', 
                            subnet_id = 101, 
                            subnet_mask = '255.255.255.0', 
                            vpc_id = 7654, )
                        ], ),
                ipv6 = openapi_client.models.get_linode_ips_200_response_ipv6.get_linode_ips_200_response_ipv6(
                    global = [
                        openapi_client.models.get_linode_ips_200_response_ipv6_global_inner.get_linode_ips_200_response_ipv6_global_inner(
                            prefix = 64, 
                            range = '2600:3c01::', 
                            region = 'us-east', 
                            route_target = '2600:3c01::ffff:ffff:ffff:ffff', )
                        ], 
                    link_local = openapi_client.models.get_linode_ips_200_response_ipv6_link_local.get_linode_ips_200_response_ipv6_link_local(
                        address = 'fe80::f03c:91ff:fe24:3a2f', 
                        gateway = 'fe80::1', 
                        linode_id = 123, 
                        prefix = 64, 
                        public = False, 
                        rdns = '', 
                        region = 'us-east', 
                        subnet_mask = 'ffff:ffff:ffff:ffff::', 
                        type = 'ipv6', ), 
                    slaac = openapi_client.models.get_linode_ips_200_response_ipv6_slaac.get_linode_ips_200_response_ipv6_slaac(
                        address = '2600:3c03::f03c:91ff:fe24:3a2f', 
                        gateway = 'fe80::1', 
                        linode_id = 123, 
                        prefix = 64, 
                        public = True, 
                        rdns = '', 
                        region = 'us-east', 
                        subnet_mask = 'ffff:ffff:ffff:ffff::', 
                        type = 'ipv6', ), )
            )
        else:
            return GetLinodeIps200Response(
        )
        """

    def testGetLinodeIps200Response(self):
        """Test GetLinodeIps200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
