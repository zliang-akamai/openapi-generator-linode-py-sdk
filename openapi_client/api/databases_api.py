# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.get_databases_engines200_response import GetDatabasesEngines200Response
from openapi_client.models.get_databases_engines200_response_all_of_data_inner import GetDatabasesEngines200ResponseAllOfDataInner
from openapi_client.models.get_databases_instances200_response import GetDatabasesInstances200Response
from openapi_client.models.get_databases_mysql_instance_backups200_response import GetDatabasesMysqlInstanceBackups200Response
from openapi_client.models.get_databases_mysql_instance_backups200_response_all_of_data_inner import GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner
from openapi_client.models.get_databases_mysql_instance_credentials200_response import GetDatabasesMysqlInstanceCredentials200Response
from openapi_client.models.get_databases_mysql_instance_ssl200_response import GetDatabasesMysqlInstanceSsl200Response
from openapi_client.models.get_databases_mysql_instances200_response import GetDatabasesMysqlInstances200Response
from openapi_client.models.get_databases_mysql_instances200_response_all_of_data_inner import GetDatabasesMysqlInstances200ResponseAllOfDataInner
from openapi_client.models.get_databases_postgre_sql_instances200_response import GetDatabasesPostgreSqlInstances200Response
from openapi_client.models.get_databases_postgre_sql_instances200_response_all_of_data_inner import GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner
from openapi_client.models.get_databases_types200_response import GetDatabasesTypes200Response
from openapi_client.models.get_databases_types200_response_all_of_data_inner import GetDatabasesTypes200ResponseAllOfDataInner
from openapi_client.models.post_databases_mysql_instance_backup_request import PostDatabasesMysqlInstanceBackupRequest
from openapi_client.models.post_databases_mysql_instances_request import PostDatabasesMysqlInstancesRequest
from openapi_client.models.post_databases_postgre_sql_instances_request import PostDatabasesPostgreSqlInstancesRequest
from openapi_client.models.put_databases_mysql_instance_request import PutDatabasesMysqlInstanceRequest
from openapi_client.models.put_databases_postgre_sql_instance_request import PutDatabasesPostgreSqlInstanceRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DatabasesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_database_mysql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Delete a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_database_mysql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Delete a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_database_mysql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Delete a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_database_mysql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/backups/{backupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_database_postgre_sql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Delete a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_database_postgre_sql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Delete a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_database_postgre_sql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Delete a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Delete a single backup for an accessible Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_database_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_database_postgre_sql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/backups/{backupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_databases_mysql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Delete a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed MySQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_databases_mysql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Delete a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed MySQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_databases_mysql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Delete a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed MySQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_databases_mysql_instance_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_databases_postgre_sql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Delete a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed PostgreSQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_databases_postgre_sql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Delete a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed PostgreSQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_databases_postgre_sql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Delete a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Remove a Managed PostgreSQL Database from your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `failed`, or `degraded` status to perform this operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_databases_postgre_sql_instance_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_engine(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        engine_id: Annotated[StrictStr, Field(description="The ID of the Managed Database engine.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesEngines200ResponseAllOfDataInner:
        """Get a managed database engine

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single Managed Database engine type and version.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engine-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param engine_id: The ID of the Managed Database engine. (required)
        :type engine_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engine_serialize(
            api_version=api_version,
            engine_id=engine_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_engine_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        engine_id: Annotated[StrictStr, Field(description="The ID of the Managed Database engine.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesEngines200ResponseAllOfDataInner]:
        """Get a managed database engine

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single Managed Database engine type and version.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engine-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param engine_id: The ID of the Managed Database engine. (required)
        :type engine_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engine_serialize(
            api_version=api_version,
            engine_id=engine_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_engine_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        engine_id: Annotated[StrictStr, Field(description="The ID of the Managed Database engine.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed database engine

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single Managed Database engine type and version.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engine-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param engine_id: The ID of the Managed Database engine. (required)
        :type engine_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engine_serialize(
            api_version=api_version,
            engine_id=engine_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_engine_serialize(
        self,
        api_version,
        engine_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if engine_id is not None:
            _path_params['engineId'] = engine_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/engines/{engineId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_engines(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesEngines200Response:
        """List managed database engines

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all available Managed Database engine types and versions. Engine IDs are used when creating new Managed Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engines     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engines_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_engines_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesEngines200Response]:
        """List managed database engines

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all available Managed Database engine types and versions. Engine IDs are used when creating new Managed Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engines     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engines_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_engines_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed database engines

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all available Managed Database engine types and versions. Engine IDs are used when creating new Managed Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases engines     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_engines_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesEngines200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_engines_serialize(
        self,
        api_version,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/engines',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_instances(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesInstances200Response:
        """List managed databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Databases that are accessible by your User, regardless of engine type.  For more detailed information on a particular Database instance, make a request to its `instance_uri`.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_instances_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesInstances200Response]:
        """List managed databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Databases that are accessible by your User, regardless of engine type.  For more detailed information on a particular Database instance, make a request to its `instance_uri`.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_instances_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Databases that are accessible by your User, regardless of engine type.  For more detailed information on a particular Database instance, make a request to its `instance_uri`.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_instances_serialize(
        self,
        api_version,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstances200ResponseAllOfDataInner:
        """Get a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed MySQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstances200ResponseAllOfDataInner]:
        """Get a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed MySQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed MySQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instance_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner:
        """Get a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner]:
        """Get a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/backups/{backupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instance_backups(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceBackups200Response:
        """List managed MySQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed MySQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instance_backups_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceBackups200Response]:
        """List managed MySQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed MySQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instance_backups_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed MySQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed MySQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed MySQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instance_backups_serialize(
        self,
        api_version,
        instance_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/backups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instance_credentials(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceCredentials200Response:
        """Get managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instance_credentials_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceCredentials200Response]:
        """Get managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instance_credentials_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instance_credentials_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/credentials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instance_ssl(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceSsl200Response:
        """Get a managed MySQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instance_ssl_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceSsl200Response]:
        """Get a managed MySQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instance_ssl_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed MySQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed MySQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instance_ssl_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/ssl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_mysql_instances(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstances200Response:
        """List managed MySQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed MySQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_mysql_instances_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstances200Response]:
        """List managed MySQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed MySQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_mysql_instances_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed MySQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed MySQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_mysql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_mysql_instances_serialize(
        self,
        api_version,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/mysql/instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgre_sql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner:
        """Get a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed PostgreSQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgre_sql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner]:
        """Get a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed PostgreSQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgre_sql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single, accessible Managed PostgreSQL Database.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgre_sql_instance_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgre_sql_instance_backups(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceBackups200Response:
        """List managed PostgreSQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed PostgreSQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgre_sql_instance_backups_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceBackups200Response]:
        """List managed PostgreSQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed PostgreSQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgre_sql_instance_backups_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed PostgreSQL database backups

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all backups for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.  Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.  Database `snapshot` type backups are created by accessing the [Create a managed PostgreSQL database backup snapshot](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instance-backup) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backups-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_backups_serialize(
            api_version=api_version,
            instance_id=instance_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgre_sql_instance_backups_serialize(
        self,
        api_version,
        instance_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/backups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgre_sql_instance_credentials(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceCredentials200Response:
        """Get managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgre_sql_instance_credentials_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceCredentials200Response]:
        """Get managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgre_sql_instance_credentials_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the root username and password for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instance_credentials_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceCredentials200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgre_sql_instance_credentials_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/credentials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgre_sql_instances(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesPostgreSqlInstances200Response:
        """List managed PostgreSQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed PostgreSQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgre_sql_instances_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesPostgreSqlInstances200Response]:
        """List managed PostgreSQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed PostgreSQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgre_sql_instances_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed PostgreSQL databases

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all accessible Managed PostgreSQL Databases.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgre_sql_instances_serialize(
        self,
        api_version,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgresql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner:
        """Get a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgresql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner]:
        """Get a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgresql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Display information for a single backup for an accessible Managed PostgreSQL Database.  The Database must not be provisioning to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-view 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceBackups200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgresql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/backups/{backupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_postgresql_instance_ssl(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstanceSsl200Response:
        """Get a managed PostgreSQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_postgresql_instance_ssl_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstanceSsl200Response]:
        """Get a managed PostgreSQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_postgresql_instance_ssl_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed PostgreSQL database SSL certificate

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the SSL CA certificate for an accessible Managed PostgreSQL Database.  The Database must have an `active` status to perform this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-ssl-cert 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_postgresql_instance_ssl_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstanceSsl200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_postgresql_instance_ssl_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/ssl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_type(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        type_id: Annotated[StrictStr, Field(description="The ID of the Managed Database type.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesTypes200ResponseAllOfDataInner:
        """Get a managed database type

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the details of a single Managed Database type. The type and number of nodes determine the resources and price of a Managed Database instance.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases type-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param type_id: The ID of the Managed Database type. (required)
        :type type_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_type_serialize(
            api_version=api_version,
            type_id=type_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_type_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        type_id: Annotated[StrictStr, Field(description="The ID of the Managed Database type.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesTypes200ResponseAllOfDataInner]:
        """Get a managed database type

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the details of a single Managed Database type. The type and number of nodes determine the resources and price of a Managed Database instance.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases type-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param type_id: The ID of the Managed Database type. (required)
        :type type_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_type_serialize(
            api_version=api_version,
            type_id=type_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_type_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        type_id: Annotated[StrictStr, Field(description="The ID of the Managed Database type.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Get a managed database type

        __This operation is currently only available for customers who already have an active Managed Database.__  Display the details of a single Managed Database type. The type and number of nodes determine the resources and price of a Managed Database instance.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases type-view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param type_id: The ID of the Managed Database type. (required)
        :type type_id: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_type_serialize(
            api_version=api_version,
            type_id=type_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_type_serialize(
        self,
        api_version,
        type_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if type_id is not None:
            _path_params['typeId'] = type_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/types/{typeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_databases_types(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesTypes200Response:
        """List managed database types

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Database node types. The type and number of nodes determine the resources and price of a Managed Database instance.  Each Managed Database can have one node type. In the case of a high availability Database, all nodes are provisioned according to the chosen type.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases types     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_types_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_databases_types_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesTypes200Response]:
        """List managed database types

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Database node types. The type and number of nodes determine the resources and price of a Managed Database instance.  Each Managed Database can have one node type. In the case of a high availability Database, all nodes are provisioned according to the chosen type.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases types     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_types_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_databases_types_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of a collection to return.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=25)]], Field(description="The number of items to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """List managed database types

        __This operation is currently only available for customers who already have an active Managed Database.__  Display all Managed Database node types. The type and number of nodes determine the resources and price of a Managed Database instance.  Each Managed Database can have one node type. In the case of a high availability Database, all nodes are provisioned according to the chosen type.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases types     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param page: The page of a collection to return.
        :type page: int
        :param page_size: The number of items to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_databases_types_serialize(
            api_version=api_version,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesTypes200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_databases_types_serialize(
        self,
        api_version,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{apiVersion}/databases/types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_mysql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Create a managed MySQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed MySQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_mysql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Create a managed MySQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed MySQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_mysql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Create a managed MySQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed MySQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_mysql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        post_databases_mysql_instance_backup_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_databases_mysql_instance_backup_request is not None:
            _body_params = post_databases_mysql_instance_backup_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/backups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_mysql_instance_backup_restore(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Restore a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed MySQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_mysql_instance_backup_restore_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Restore a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed MySQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_mysql_instance_backup_restore_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Restore a managed MySQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed MySQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed MySQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_mysql_instance_backup_restore_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/backups/{backupId}/restore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_mysql_instance_credentials_reset(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Reset managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed MySQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed MySQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_mysql_instance_credentials_reset_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Reset managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed MySQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed MySQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_mysql_instance_credentials_reset_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Reset managed MySQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed MySQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed MySQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed MySQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_mysql_instance_credentials_reset_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/credentials/reset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_mysql_instance_patch(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Patch a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed MySQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_mysql_instance_patch_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Patch a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed MySQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_mysql_instance_patch_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Patch a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed MySQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_mysql_instance_patch_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}/patch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_mysql_instances(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_mysql_instances_request: Annotated[PostDatabasesMysqlInstancesRequest, Field(description="Information about the Managed MySQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstances200ResponseAllOfDataInner:
        """Create a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed MySQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-create \\   --label example-db1 \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine mysql/8.0.26 \\   --encrypted false \\   --ssl_connection false \\   --replication_type semi_synch \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_mysql_instances_request: Information about the Managed MySQL Database you are creating. (required)
        :type post_databases_mysql_instances_request: PostDatabasesMysqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instances_serialize(
            api_version=api_version,
            post_databases_mysql_instances_request=post_databases_mysql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_mysql_instances_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_mysql_instances_request: Annotated[PostDatabasesMysqlInstancesRequest, Field(description="Information about the Managed MySQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstances200ResponseAllOfDataInner]:
        """Create a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed MySQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-create \\   --label example-db1 \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine mysql/8.0.26 \\   --encrypted false \\   --ssl_connection false \\   --replication_type semi_synch \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_mysql_instances_request: Information about the Managed MySQL Database you are creating. (required)
        :type post_databases_mysql_instances_request: PostDatabasesMysqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instances_serialize(
            api_version=api_version,
            post_databases_mysql_instances_request=post_databases_mysql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_mysql_instances_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_mysql_instances_request: Annotated[PostDatabasesMysqlInstancesRequest, Field(description="Information about the Managed MySQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Create a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed MySQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed MySQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-create \\   --label example-db1 \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine mysql/8.0.26 \\   --encrypted false \\   --ssl_connection false \\   --replication_type semi_synch \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_mysql_instances_request: Information about the Managed MySQL Database you are creating. (required)
        :type post_databases_mysql_instances_request: PostDatabasesMysqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_mysql_instances_serialize(
            api_version=api_version,
            post_databases_mysql_instances_request=post_databases_mysql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_mysql_instances_serialize(
        self,
        api_version,
        post_databases_mysql_instances_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_databases_mysql_instances_request is not None:
            _body_params = post_databases_mysql_instances_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/mysql/instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_postgre_sql_instance_backup(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Create a managed PostgreSQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_postgre_sql_instance_backup_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Create a managed PostgreSQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_postgre_sql_instance_backup_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        post_databases_mysql_instance_backup_request: Annotated[Optional[PostDatabasesMysqlInstanceBackupRequest], Field(description="Information about the snapshot backup to create.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Create a managed PostgreSQL database backup snapshot

        __This operation is currently only available for customers who already have an active Managed Database.__  Creates a snapshot backup of a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.  Backups generated by this operation have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.  The Database must have an `active` status to perform this operation. If another backup is in progress, it must complete before a new backup can be initiated.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-snapshot 123 \\   --label snapshot1 \\   --target primary     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param post_databases_mysql_instance_backup_request: Information about the snapshot backup to create.
        :type post_databases_mysql_instance_backup_request: PostDatabasesMysqlInstanceBackupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_serialize(
            api_version=api_version,
            instance_id=instance_id,
            post_databases_mysql_instance_backup_request=post_databases_mysql_instance_backup_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_postgre_sql_instance_backup_serialize(
        self,
        api_version,
        instance_id,
        post_databases_mysql_instance_backup_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_databases_mysql_instance_backup_request is not None:
            _body_params = post_databases_mysql_instance_backup_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/backups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_postgre_sql_instance_backup_restore(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Restore a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed PostgreSQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_postgre_sql_instance_backup_restore_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Restore a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed PostgreSQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_postgre_sql_instance_backup_restore_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        backup_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database backup.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Restore a managed PostgreSQL database backup

        __This operation is currently only available for customers who already have an active Managed Database.__  Restore a backup to a Managed PostgreSQL Database on your Account.  Requires `read_write` access to the Database.  The Database must have an `active`, `degraded`, or `failed` status to perform this operation.  __Note__. Restoring from a backup will erase all existing data on the database instance and replace it with backup data.  __Note__. Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-backup-restore 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param backup_id: The ID of the Managed PostgreSQL Database backup. (required)
        :type backup_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_backup_restore_serialize(
            api_version=api_version,
            instance_id=instance_id,
            backup_id=backup_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_postgre_sql_instance_backup_restore_serialize(
        self,
        api_version,
        instance_id,
        backup_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if backup_id is not None:
            _path_params['backupId'] = backup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/backups/{backupId}/restore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_postgre_sql_instance_credentials_reset(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Reset managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed PostgreSQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_postgre_sql_instance_credentials_reset_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Reset managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed PostgreSQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_postgre_sql_instance_credentials_reset_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Reset managed PostgreSQL database credentials

        __This operation is currently only available for customers who already have an active Managed Database.__  Reset the root password for a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  A new root password is randomly generated and accessible with the [Get managed PostgreSQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-credentials) operation.  Only unrestricted Users can access this operation, and have access regardless of the acting token's OAuth scopes.  __Note__. It may take several seconds for credentials to reset.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-creds-reset 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_credentials_reset_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_postgre_sql_instance_credentials_reset_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/credentials/reset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_postgre_sql_instance_patch(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> object:
        """Patch a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_postgre_sql_instance_patch_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[object]:
        """Patch a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_postgre_sql_instance_patch_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Patch a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. This function runs during regular maintenance windows, which are configurable with the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  __Note__  - If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-patch 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instance_patch_serialize(
            api_version=api_version,
            instance_id=instance_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_postgre_sql_instance_patch_serialize(
        self,
        api_version,
        instance_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}/patch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_databases_postgre_sql_instances(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_postgre_sql_instances_request: Annotated[PostDatabasesPostgreSqlInstancesRequest, Field(description="Information about the Managed PostgreSQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner:
        """Create a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed PostgreSQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-create \\   --label example-db \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine postgresql/13.2 \\   --encrypted false \\   --ssl_connection false \\   --replication_type asynch \\   --replication_commit_type local \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_postgre_sql_instances_request: Information about the Managed PostgreSQL Database you are creating. (required)
        :type post_databases_postgre_sql_instances_request: PostDatabasesPostgreSqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            post_databases_postgre_sql_instances_request=post_databases_postgre_sql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_databases_postgre_sql_instances_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_postgre_sql_instances_request: Annotated[PostDatabasesPostgreSqlInstancesRequest, Field(description="Information about the Managed PostgreSQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner]:
        """Create a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed PostgreSQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-create \\   --label example-db \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine postgresql/13.2 \\   --encrypted false \\   --ssl_connection false \\   --replication_type asynch \\   --replication_commit_type local \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_postgre_sql_instances_request: Information about the Managed PostgreSQL Database you are creating. (required)
        :type post_databases_postgre_sql_instances_request: PostDatabasesPostgreSqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            post_databases_postgre_sql_instances_request=post_databases_postgre_sql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_databases_postgre_sql_instances_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        post_databases_postgre_sql_instances_request: Annotated[PostDatabasesPostgreSqlInstancesRequest, Field(description="Information about the Managed PostgreSQL Database you are creating.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Create a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Provision a Managed PostgreSQL Database.  Restricted Users must have the `add_databases` grant to use this operation.  New instances can take approximately 15 to 30 minutes to provision.  The `allow_list` is used to control access to the Managed Database.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database during configurable maintenance windows.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.  - To modify update the maintenance window for a Database, run the [Update a managed PostgreSQL database](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-create \\   --label example-db \\   --region us-east \\   --type g6-dedicated-2 \\   --cluster_size 3 \\   --engine postgresql/13.2 \\   --encrypted false \\   --ssl_connection false \\   --replication_type asynch \\   --replication_commit_type local \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param post_databases_postgre_sql_instances_request: Information about the Managed PostgreSQL Database you are creating. (required)
        :type post_databases_postgre_sql_instances_request: PostDatabasesPostgreSqlInstancesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_databases_postgre_sql_instances_serialize(
            api_version=api_version,
            post_databases_postgre_sql_instances_request=post_databases_postgre_sql_instances_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_databases_postgre_sql_instances_serialize(
        self,
        api_version,
        post_databases_postgre_sql_instances_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_databases_postgre_sql_instances_request is not None:
            _body_params = post_databases_postgre_sql_instances_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{apiVersion}/databases/postgresql/instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_databases_mysql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_mysql_instance_request: Annotated[PutDatabasesMysqlInstanceRequest, Field(description="Updated information for the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesMysqlInstances200ResponseAllOfDataInner:
        """Update a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_mysql_instance_request: Updated information for the Managed MySQL Database. (required)
        :type put_databases_mysql_instance_request: PutDatabasesMysqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_mysql_instance_request=put_databases_mysql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_databases_mysql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_mysql_instance_request: Annotated[PutDatabasesMysqlInstanceRequest, Field(description="Updated information for the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesMysqlInstances200ResponseAllOfDataInner]:
        """Update a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_mysql_instance_request: Updated information for the Managed MySQL Database. (required)
        :type put_databases_mysql_instance_request: PutDatabasesMysqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_mysql_instance_request=put_databases_mysql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_databases_mysql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_mysql_instance_request: Annotated[PutDatabasesMysqlInstanceRequest, Field(description="Updated information for the Managed MySQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Update a managed MySQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed MySQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](https://www.linode.com/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases mysql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_mysql_instance_request: Updated information for the Managed MySQL Database. (required)
        :type put_databases_mysql_instance_request: PutDatabasesMysqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_mysql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_mysql_instance_request=put_databases_mysql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesMysqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_databases_mysql_instance_serialize(
        self,
        api_version,
        instance_id,
        put_databases_mysql_instance_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if put_databases_mysql_instance_request is not None:
            _body_params = put_databases_mysql_instance_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/{apiVersion}/databases/mysql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_databases_postgre_sql_instance(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_postgre_sql_instance_request: Annotated[PutDatabasesPostgreSqlInstanceRequest, Field(description="Updated information for the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner:
        """Update a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_postgre_sql_instance_request: Updated information for the Managed PostgreSQL Database. (required)
        :type put_databases_postgre_sql_instance_request: PutDatabasesPostgreSqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_postgre_sql_instance_request=put_databases_postgre_sql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_databases_postgre_sql_instance_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_postgre_sql_instance_request: Annotated[PutDatabasesPostgreSqlInstanceRequest, Field(description="Updated information for the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> ApiResponse[GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner]:
        """Update a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_postgre_sql_instance_request: Updated information for the Managed PostgreSQL Database. (required)
        :type put_databases_postgre_sql_instance_request: PutDatabasesPostgreSqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_postgre_sql_instance_request=put_databases_postgre_sql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_databases_postgre_sql_instance_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="__Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta.")],
        instance_id: Annotated[StrictInt, Field(description="The ID of the Managed PostgreSQL Database.")],
        put_databases_postgre_sql_instance_request: Annotated[PutDatabasesPostgreSqlInstanceRequest, Field(description="Updated information for the Managed PostgreSQL Database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=2)] = 0,
    ) -> RESTResponseType:
        """Update a managed PostgreSQL database

        __This operation is currently only available for customers who already have an active Managed Database.__  Update a Managed PostgreSQL Database.  Requires `read_write` access to the Database.  The Database must have an `active` status to perform this operation.  Updating addresses in the `allow_list` overwrites any existing addresses.  - IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.  - If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.  - Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.  - __Note__. Updates to the `allow_list` may take a short period of time to complete, making this operation inappropriate for rapid successive updates to this property.  All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.  - If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.  - __The database software is not updated automatically.__ To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli databases postgresql-update 123 \\   --label example-db \\   --allow_list 203.0.113.1 \\   --allow_list 192.0.1.0/24 \\   --type g6-standard-1 \\   --updates.frequency monthly \\   --updates.duration 3 \\   --updates.hour_of_day 12 \\   --updates.day_of_week 4 \\   --updates.week_of_month 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     databases:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)

        :param api_version: __Enum__ Call either the `v4` URL, or `v4beta` for operations still in Beta. (required)
        :type api_version: str
        :param instance_id: The ID of the Managed PostgreSQL Database. (required)
        :type instance_id: int
        :param put_databases_postgre_sql_instance_request: Updated information for the Managed PostgreSQL Database. (required)
        :type put_databases_postgre_sql_instance_request: PutDatabasesPostgreSqlInstanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_databases_postgre_sql_instance_serialize(
            api_version=api_version,
            instance_id=instance_id,
            put_databases_postgre_sql_instance_request=put_databases_postgre_sql_instance_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDatabasesPostgreSqlInstances200ResponseAllOfDataInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_databases_postgre_sql_instance_serialize(
        self,
        api_version,
        instance_id,
        put_databases_postgre_sql_instance_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.linode.com/v4',
            'https://api.linode.com/v4beta'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if api_version is not None:
            _path_params['apiVersion'] = api_version
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if put_databases_postgre_sql_instance_request is not None:
            _body_params = put_databases_postgre_sql_instance_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'personalAccessToken', 
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/{apiVersion}/databases/postgresql/instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


