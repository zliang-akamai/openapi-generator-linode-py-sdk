# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_user_grants200_response_database_inner import GetUserGrants200ResponseDatabaseInner
from openapi_client.models.get_user_grants200_response_global import GetUserGrants200ResponseGlobal
from typing import Optional, Set
from typing_extensions import Self

class GrantsResponse(BaseModel):
    """
    A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.
    """ # noqa: E501
    database: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Database that is owned by this Account.")
    domain: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Domain that is owned by this Account.")
    firewall: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Firewall that is owned by this Account.")
    var_global: Optional[GetUserGrants200ResponseGlobal] = Field(default=None, alias="global")
    image: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Image that is owned by this Account.")
    linode: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Linode that is owned by this Account.")
    longview: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Longview Client that is owned by this Account.")
    nodebalancer: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each NodeBalancer that is owned by this Account.")
    placement_group: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Placement Group that is owned by this Account.")
    stackscript: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each StackScript that is owned by this Account.")
    volume: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each Block Storage Volume that is owned by this Account.")
    vpc: Optional[List[GetUserGrants200ResponseDatabaseInner]] = Field(default=None, description="The grants this User has for each VPC that is owned by this Account.")
    __properties: ClassVar[List[str]] = ["database", "domain", "firewall", "global", "image", "linode", "longview", "nodebalancer", "placement_group", "stackscript", "volume", "vpc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GrantsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in database (list)
        _items = []
        if self.database:
            for _item_database in self.database:
                if _item_database:
                    _items.append(_item_database.to_dict())
            _dict['database'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in domain (list)
        _items = []
        if self.domain:
            for _item_domain in self.domain:
                if _item_domain:
                    _items.append(_item_domain.to_dict())
            _dict['domain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in firewall (list)
        _items = []
        if self.firewall:
            for _item_firewall in self.firewall:
                if _item_firewall:
                    _items.append(_item_firewall.to_dict())
            _dict['firewall'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_global
        if self.var_global:
            _dict['global'] = self.var_global.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image (list)
        _items = []
        if self.image:
            for _item_image in self.image:
                if _item_image:
                    _items.append(_item_image.to_dict())
            _dict['image'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in linode (list)
        _items = []
        if self.linode:
            for _item_linode in self.linode:
                if _item_linode:
                    _items.append(_item_linode.to_dict())
            _dict['linode'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in longview (list)
        _items = []
        if self.longview:
            for _item_longview in self.longview:
                if _item_longview:
                    _items.append(_item_longview.to_dict())
            _dict['longview'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodebalancer (list)
        _items = []
        if self.nodebalancer:
            for _item_nodebalancer in self.nodebalancer:
                if _item_nodebalancer:
                    _items.append(_item_nodebalancer.to_dict())
            _dict['nodebalancer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in placement_group (list)
        _items = []
        if self.placement_group:
            for _item_placement_group in self.placement_group:
                if _item_placement_group:
                    _items.append(_item_placement_group.to_dict())
            _dict['placement_group'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stackscript (list)
        _items = []
        if self.stackscript:
            for _item_stackscript in self.stackscript:
                if _item_stackscript:
                    _items.append(_item_stackscript.to_dict())
            _dict['stackscript'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume (list)
        _items = []
        if self.volume:
            for _item_volume in self.volume:
                if _item_volume:
                    _items.append(_item_volume.to_dict())
            _dict['volume'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpc (list)
        _items = []
        if self.vpc:
            for _item_vpc in self.vpc:
                if _item_vpc:
                    _items.append(_item_vpc.to_dict())
            _dict['vpc'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GrantsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "database": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["database"]] if obj.get("database") is not None else None,
            "domain": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["domain"]] if obj.get("domain") is not None else None,
            "firewall": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["firewall"]] if obj.get("firewall") is not None else None,
            "global": GetUserGrants200ResponseGlobal.from_dict(obj["global"]) if obj.get("global") is not None else None,
            "image": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["image"]] if obj.get("image") is not None else None,
            "linode": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["linode"]] if obj.get("linode") is not None else None,
            "longview": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["longview"]] if obj.get("longview") is not None else None,
            "nodebalancer": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["nodebalancer"]] if obj.get("nodebalancer") is not None else None,
            "placement_group": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["placement_group"]] if obj.get("placement_group") is not None else None,
            "stackscript": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["stackscript"]] if obj.get("stackscript") is not None else None,
            "volume": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["volume"]] if obj.get("volume") is not None else None,
            "vpc": [GetUserGrants200ResponseDatabaseInner.from_dict(_item) for _item in obj["vpc"]] if obj.get("vpc") is not None else None
        })
        return _obj


