# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_maintenance200_response_data_inner_entity import GetMaintenance200ResponseDataInnerEntity
from typing import Optional, Set
from typing_extensions import Self

class Maintenance(BaseModel):
    """
    Information about maintenance affecting an entity.
    """ # noqa: E501
    entity: Optional[GetMaintenance200ResponseDataInnerEntity] = None
    reason: Optional[StrictStr] = Field(default=None, description="The reason maintenance is being performed.")
    status: Optional[StrictStr] = Field(default=None, description="The maintenance status.  Maintenance progresses in the following sequence: pending, started, then completed.")
    type: Optional[StrictStr] = Field(default=None, description="The type of maintenance.")
    when: Optional[datetime] = Field(default=None, description="When the maintenance will begin.  [Filterable](https://techdocs.akamai.com/linode-api/reference/filtering-and-sorting) with the following parameters:  - A single value in date-time string format (`%Y-%m-%dT%H:%M:%S`), which returns only matches to that value.  - A dictionary containing pairs of inequality operator string keys (`+or`, `+gt`, `+gte`, `+lt`, `+lte`, or `+neq`) and single date-time string format values (`%Y-%m-%dT%H:%M:%S`). `+or` accepts an array of values that may consist of single date-time strings or dictionaries of inequality operator pairs.")
    __properties: ClassVar[List[str]] = ["entity", "reason", "status", "type", "when"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['completed', 'pending', 'started']):
            raise ValueError("must be one of enum values ('completed', 'pending', 'started')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['reboot', 'cold_migration', 'live_migration']):
            raise ValueError("must be one of enum values ('reboot', 'cold_migration', 'live_migration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Maintenance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Maintenance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity": GetMaintenance200ResponseDataInnerEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "when": obj.get("when")
        })
        return _obj


