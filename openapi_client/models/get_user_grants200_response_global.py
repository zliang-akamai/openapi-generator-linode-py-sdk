# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetUserGrants200ResponseGlobal(BaseModel):
    """
    A structure containing the Account-level grants a User has.
    """ # noqa: E501
    account_access: Optional[StrictStr] = Field(default=None, description="The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, this grant can be added to a child account user, to give the user `read-write` access. This gives the child user unrestricted access to expected management operations, such as creating other child users. However, child users don't have write access to billing operations. The API issues a specific error message if a write operation is attempted by a child user.")
    add_databases: Optional[StrictBool] = Field(default=None, description="If true, this User may add Managed Databases.")
    add_domains: Optional[StrictBool] = Field(default=None, description="If true, this User may add Domains.")
    add_firewalls: Optional[StrictBool] = Field(default=None, description="If true, this User may add Firewalls.")
    add_images: Optional[StrictBool] = Field(default=None, description="If true, this User may add Images.")
    add_linodes: Optional[StrictBool] = Field(default=None, description="If true, this User may create Linodes.")
    add_loadbalancers: Optional[StrictBool] = Field(default=None, description="If true, this User may add Cloud Load Balancers.")
    add_longview: Optional[StrictBool] = Field(default=None, description="If true, this User may create Longview clients and view the current plan.")
    add_nodebalancers: Optional[StrictBool] = Field(default=None, description="If true, this User may add NodeBalancers.")
    add_placement_groups: Optional[StrictBool] = Field(default=None, description="If true, this User may add Placement Groups.")
    add_stackscripts: Optional[StrictBool] = Field(default=None, description="If true, this User may add StackScripts.")
    add_volumes: Optional[StrictBool] = Field(default=None, description="If true, this User may add Volumes.")
    add_vpcs: Optional[StrictBool] = Field(default=None, description="If true, this User may add VPCs.")
    cancel_account: Optional[StrictBool] = Field(default=None, description="If true, this User may cancel the entire Account.")
    child_account_access: Optional[StrictBool] = Field(default=None, description="In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, this gives a parent account access to endpoints that can be used to manage child accounts. Unrestricted parent account users have access to this grant, while restricted parent users don't. An unrestricted parent user can set this to `true` to add this grant to a restricted parent user. Displayed as `null` for all non-parent accounts.")
    longview_subscription: Optional[StrictBool] = Field(default=None, description="If true, this User may manage the Account's Longview subscription.")
    __properties: ClassVar[List[str]] = ["account_access", "add_databases", "add_domains", "add_firewalls", "add_images", "add_linodes", "add_loadbalancers", "add_longview", "add_nodebalancers", "add_placement_groups", "add_stackscripts", "add_volumes", "add_vpcs", "cancel_account", "child_account_access", "longview_subscription"]

    @field_validator('account_access')
    def account_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['read_only', 'read_write']):
            raise ValueError("must be one of enum values ('read_only', 'read_write')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUserGrants200ResponseGlobal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_access (nullable) is None
        # and model_fields_set contains the field
        if self.account_access is None and "account_access" in self.model_fields_set:
            _dict['account_access'] = None

        # set to None if child_account_access (nullable) is None
        # and model_fields_set contains the field
        if self.child_account_access is None and "child_account_access" in self.model_fields_set:
            _dict['child_account_access'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUserGrants200ResponseGlobal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_access": obj.get("account_access"),
            "add_databases": obj.get("add_databases"),
            "add_domains": obj.get("add_domains"),
            "add_firewalls": obj.get("add_firewalls"),
            "add_images": obj.get("add_images"),
            "add_linodes": obj.get("add_linodes"),
            "add_loadbalancers": obj.get("add_loadbalancers"),
            "add_longview": obj.get("add_longview"),
            "add_nodebalancers": obj.get("add_nodebalancers"),
            "add_placement_groups": obj.get("add_placement_groups"),
            "add_stackscripts": obj.get("add_stackscripts"),
            "add_volumes": obj.get("add_volumes"),
            "add_vpcs": obj.get("add_vpcs"),
            "cancel_account": obj.get("cancel_account"),
            "child_account_access": obj.get("child_account_access"),
            "longview_subscription": obj.get("longview_subscription")
        })
        return _obj


