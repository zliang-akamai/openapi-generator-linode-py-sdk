# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetManagedServices200ResponseDataInner(BaseModel):
    """
    A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.
    """ # noqa: E501
    address: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=100)]] = Field(default=None, description="The URL at which this Service is monitored. URL parameters such as `?no-cache=1` are preserved. URL fragments/anchors such as `#monitor` are __not__ preserved.")
    body: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="What to expect to find in the response body for the Service to be considered up.")
    consultation_group: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The group of ManagedContacts who should be notified or consulted with when an Issue is detected.")
    created: Optional[datetime] = Field(default=None, description="When this Managed Service was created.")
    credentials: Optional[List[StrictInt]] = Field(default=None, description="An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.")
    id: Optional[StrictInt] = Field(default=None, description="This Service's unique ID.")
    label: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=64)]] = Field(default=None, description="The label for this Service. This is for display purposes only.")
    notes: Optional[StrictStr] = Field(default=None, description="Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.")
    region: Optional[StrictStr] = Field(default=None, description="The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.")
    service_type: Optional[StrictStr] = Field(default=None, description="How this Service is monitored.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of this Service.")
    timeout: Optional[Annotated[int, Field(le=255, strict=True, ge=1)]] = Field(default=None, description="How long to wait, in seconds, for a response before considering the Service to be down.")
    updated: Optional[datetime] = Field(default=None, description="When this Managed Service was last updated.")
    __properties: ClassVar[List[str]] = ["address", "body", "consultation_group", "created", "credentials", "id", "label", "notes", "region", "service_type", "status", "timeout", "updated"]

    @field_validator('label')
    def label_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9-_ \.]{3,64}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z0-9-_ \.]{3,64}/")
        return value

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['url', 'tcp']):
            raise ValueError("must be one of enum values ('url', 'tcp')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['disabled', 'pending', 'ok', 'problem']):
            raise ValueError("must be one of enum values ('disabled', 'pending', 'ok', 'problem')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetManagedServices200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "id",
            "status",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['body'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetManagedServices200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "body": obj.get("body"),
            "consultation_group": obj.get("consultation_group"),
            "created": obj.get("created"),
            "credentials": obj.get("credentials"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "notes": obj.get("notes"),
            "region": obj.get("region"),
            "service_type": obj.get("service_type"),
            "status": obj.get("status"),
            "timeout": obj.get("timeout"),
            "updated": obj.get("updated")
        })
        return _obj


