# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetTicketReplies200ResponseDataInner(BaseModel):
    """
    An object representing a reply to a Support Ticket.
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The date and time this Ticket reply was created.")
    created_by: Optional[StrictStr] = Field(default=None, description="The User who submitted this reply.")
    description: Optional[StrictStr] = Field(default=None, description="The body of this Support Ticket reply.")
    from_linode: Optional[StrictBool] = Field(default=None, description="If set to true, this reply came from a Linode employee.")
    gravatar_id: Optional[StrictStr] = Field(default=None, description="The Gravatar ID of the User who created this reply.")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of this Support Ticket reply.")
    __properties: ClassVar[List[str]] = ["created", "created_by", "description", "from_linode", "gravatar_id", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTicketReplies200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "created_by",
            "description",
            "from_linode",
            "gravatar_id",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTicketReplies200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "created_by": obj.get("created_by"),
            "description": obj.get("description"),
            "from_linode": obj.get("from_linode"),
            "gravatar_id": obj.get("gravatar_id"),
            "id": obj.get("id")
        })
        return _obj


