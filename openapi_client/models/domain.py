# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Domain(BaseModel):
    """
    A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.
    """ # noqa: E501
    axfr_ips: Optional[List[StrictStr]] = Field(default=None, description="The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.  __Note__. This is potentially dangerous, and should be set to an empty list unless you intend to use it.")
    description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=253)]] = Field(default=None, description="A description for this Domain. This is for display purposes only.")
    domain: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=253)]] = Field(default=None, description="The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.")
    expire_sec: Optional[StrictInt] = Field(default=0, description="The amount of time in seconds that may pass before this Domain is no longer authoritative.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 1209600.")
    group: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="The group this Domain belongs to.  This is for display purposes only.")
    id: Optional[StrictInt] = Field(default=None, description="This Domain's unique ID.")
    master_ips: Optional[List[StrictStr]] = Field(default=None, description="The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.")
    refresh_sec: Optional[StrictInt] = Field(default=0, description="The amount of time in seconds before this Domain should be refreshed.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.")
    retry_sec: Optional[StrictInt] = Field(default=0, description="The interval, in seconds, at which a failed refresh should be retried.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.")
    soa_email: Optional[StrictStr] = Field(default=None, description="Start of Authority email address. This is required for `type` master Domains.")
    status: Optional[StrictStr] = Field(default='active', description="Used to control whether this Domain is currently being rendered.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An array of tags applied to this object.  Tags are for organizational purposes only.")
    ttl_sec: Optional[StrictInt] = Field(default=0, description="\"Time to Live\" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200. - Any other value is rounded up to the nearest valid value. - A value of 0 is equivalent to the default value of 86400.")
    type: Optional[StrictStr] = Field(default=None, description="Whether this Domain represents the authoritative source of information for the domain it describes (`master`), or whether it is a read-only copy of a master (`slave`).")
    __properties: ClassVar[List[str]] = ["axfr_ips", "description", "domain", "expire_sec", "group", "id", "master_ips", "refresh_sec", "retry_sec", "soa_email", "status", "tags", "ttl_sec", "type"]

    @field_validator('domain')
    def domain_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['disabled', 'active']):
            raise ValueError("must be one of enum values ('disabled', 'active')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['master', 'slave']):
            raise ValueError("must be one of enum values ('master', 'slave')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Domain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Domain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "axfr_ips": obj.get("axfr_ips"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "expire_sec": obj.get("expire_sec") if obj.get("expire_sec") is not None else 0,
            "group": obj.get("group"),
            "id": obj.get("id"),
            "master_ips": obj.get("master_ips"),
            "refresh_sec": obj.get("refresh_sec") if obj.get("refresh_sec") is not None else 0,
            "retry_sec": obj.get("retry_sec") if obj.get("retry_sec") is not None else 0,
            "soa_email": obj.get("soa_email"),
            "status": obj.get("status") if obj.get("status") is not None else 'active',
            "tags": obj.get("tags"),
            "ttl_sec": obj.get("ttl_sec") if obj.get("ttl_sec") is not None else 0,
            "type": obj.get("type")
        })
        return _obj


