# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LinodeBackupsSchedule(BaseModel):
    """
    LinodeBackupsSchedule
    """ # noqa: E501
    day: Optional[StrictStr] = Field(default=None, description="The day of the week that your Linode's weekly backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as `Scheduling` until the `day` is automatically selected.")
    window: Optional[StrictStr] = Field(default=None, description="When your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur.  For example, `W10` indicates that your backups should be taken between 10:00 and 12:00. If you don't choose a backup window, the API automatically assigns one.  If not set manually, when backups are initially enabled this may come back as `Scheduling` until the `window` is automatically selected.")
    __properties: ClassVar[List[str]] = ["day", "window"]

    @field_validator('day')
    def day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Scheduling', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']):
            raise ValueError("must be one of enum values ('Scheduling', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')")
        return value

    @field_validator('window')
    def window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Scheduling', 'W0', 'W2', 'W4', 'W6', 'W8', 'W10', 'W12', 'W14', 'W16', 'W18', 'W20', 'W22']):
            raise ValueError("must be one of enum values ('Scheduling', 'W0', 'W2', 'W4', 'W6', 'W8', 'W10', 'W12', 'W14', 'W16', 'W18', 'W20', 'W22')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinodeBackupsSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['day'] = None

        # set to None if window (nullable) is None
        # and model_fields_set contains the field
        if self.window is None and "window" in self.model_fields_set:
            _dict['window'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinodeBackupsSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day": obj.get("day"),
            "window": obj.get("window")
        })
        return _obj


