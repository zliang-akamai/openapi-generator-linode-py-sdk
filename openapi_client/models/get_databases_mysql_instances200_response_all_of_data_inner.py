# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_databases_instances200_response_all_of_data_inner_hosts import GetDatabasesInstances200ResponseAllOfDataInnerHosts
from openapi_client.models.get_databases_instances200_response_all_of_data_inner_updates import GetDatabasesInstances200ResponseAllOfDataInnerUpdates
from typing import Optional, Set
from typing_extensions import Self

class GetDatabasesMysqlInstances200ResponseAllOfDataInner(BaseModel):
    """
    Managed MySQL Databases object.
    """ # noqa: E501
    allow_list: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.  By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.  If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.")
    cluster_size: Optional[StrictInt] = Field(default=1, description="The number of Linode Instance nodes deployed to the Managed Database.  Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.")
    created: Optional[datetime] = Field(default=None, description="When this Managed Database was created.")
    encrypted: Optional[StrictBool] = Field(default=False, description="Whether the Managed Databases is encrypted.")
    engine: Optional[StrictStr] = Field(default=None, description="The Managed Database engine type.")
    hosts: Optional[GetDatabasesInstances200ResponseAllOfDataInnerHosts] = None
    id: Optional[StrictInt] = Field(default=None, description="A unique ID that can be used to identify and reference the Managed Database.")
    label: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=32)]] = Field(default=None, description="A unique, user-defined string referring to the Managed Database.")
    port: Optional[StrictInt] = Field(default=None, description="The access port for this Managed Database.")
    region: Optional[StrictStr] = Field(default=None, description="The [Region](https://techdocs.akamai.com/linode-api/reference/get-regions) ID for the Managed Database.")
    replication_type: Optional[StrictStr] = Field(default=None, description="The replication method used for the Managed Database.  Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.  Must be `none` for a single node cluster.  Must be `asynch` or `semi_synch` for a high availability cluster.")
    ssl_connection: Optional[StrictBool] = Field(default=True, description="Whether to require SSL credentials to establish a connection to the Managed Database.  Run the [Get managed MySQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-credentials) operation for access information.")
    status: Optional[StrictStr] = Field(default=None, description="The operating status of the Managed Database.")
    total_disk_size_gb: Optional[StrictInt] = Field(default=None, description="The total disk size of the database in GB.")
    type: Optional[StrictStr] = Field(default=None, description="The Linode Instance type used by the Managed Database for its nodes.")
    updated: Optional[datetime] = Field(default=None, description="When this Managed Database was last updated.")
    updates: Optional[GetDatabasesInstances200ResponseAllOfDataInnerUpdates] = None
    used_disk_size_gb: Optional[StrictInt] = Field(default=None, description="The used space of the database in GB.")
    version: Optional[StrictStr] = Field(default=None, description="The Managed Database engine version.")
    __properties: ClassVar[List[str]] = ["allow_list", "cluster_size", "created", "encrypted", "engine", "hosts", "id", "label", "port", "region", "replication_type", "ssl_connection", "status", "total_disk_size_gb", "type", "updated", "updates", "used_disk_size_gb", "version"]

    @field_validator('cluster_size')
    def cluster_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 3]):
            raise ValueError("must be one of enum values (1, 3)")
        return value

    @field_validator('replication_type')
    def replication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'asynch', 'semi_synch']):
            raise ValueError("must be one of enum values ('none', 'asynch', 'semi_synch')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['provisioning', 'active', 'suspending', 'suspended', 'resuming', 'restoring', 'failed', 'degraded', 'updating', 'backing_up']):
            raise ValueError("must be one of enum values ('provisioning', 'active', 'suspending', 'suspended', 'resuming', 'restoring', 'failed', 'degraded', 'updating', 'backing_up')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDatabasesMysqlInstances200ResponseAllOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "engine",
            "id",
            "status",
            "updated",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hosts
        if self.hosts:
            _dict['hosts'] = self.hosts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updates
        if self.updates:
            _dict['updates'] = self.updates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDatabasesMysqlInstances200ResponseAllOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_list": obj.get("allow_list"),
            "cluster_size": obj.get("cluster_size") if obj.get("cluster_size") is not None else 1,
            "created": obj.get("created"),
            "encrypted": obj.get("encrypted") if obj.get("encrypted") is not None else False,
            "engine": obj.get("engine"),
            "hosts": GetDatabasesInstances200ResponseAllOfDataInnerHosts.from_dict(obj["hosts"]) if obj.get("hosts") is not None else None,
            "id": obj.get("id"),
            "label": obj.get("label"),
            "port": obj.get("port"),
            "region": obj.get("region"),
            "replication_type": obj.get("replication_type"),
            "ssl_connection": obj.get("ssl_connection") if obj.get("ssl_connection") is not None else True,
            "status": obj.get("status"),
            "total_disk_size_gb": obj.get("total_disk_size_gb"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "updates": GetDatabasesInstances200ResponseAllOfDataInnerUpdates.from_dict(obj["updates"]) if obj.get("updates") is not None else None,
            "used_disk_size_gb": obj.get("used_disk_size_gb"),
            "version": obj.get("version")
        })
        return _obj


