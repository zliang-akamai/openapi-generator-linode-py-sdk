# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetManagedLinodeSettings200ResponseDataInnerSsh(BaseModel):
    """
    The SSH settings for this Linode.
    """ # noqa: E501
    access: Optional[StrictBool] = Field(default=True, description="If true, Linode special forces may access this Linode over ssh to respond to Issues.")
    ip: Optional[StrictStr] = Field(default='any', description="The IP Linode special forces should use to access this Linode when responding to an Issue.  By default, any of a Linode's IP addresses can be used for incident response access.")
    port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The port Linode special forces should use to access this Linode over ssh to respond to an Issue.  The default `null` value corresponds to port 22.")
    user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=32)]] = Field(default=None, description="The specific user, if any, Linode's special forces should use when accessing this Linode to respond to an issue.  The default `null` value corresponds to the root user.")
    __properties: ClassVar[List[str]] = ["access", "ip", "port", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetManagedLinodeSettings200ResponseDataInnerSsh from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetManagedLinodeSettings200ResponseDataInnerSsh from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access") if obj.get("access") is not None else True,
            "ip": obj.get("ip") if obj.get("ip") is not None else 'any',
            "port": obj.get("port"),
            "user": obj.get("user")
        })
        return _obj


