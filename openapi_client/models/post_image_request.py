# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostImageRequest(BaseModel):
    """
    PostImageRequest
    """ # noqa: E501
    cloud_init: Optional[StrictBool] = Field(default=None, description="Whether this image supports [cloud-init](https://www.linode.com/docs/guides/write-files-with-cloud-init/).")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of this image.")
    disk_id: StrictInt = Field(description="The ID of the target Linode disk for this image.")
    label: Optional[StrictStr] = Field(default=None, description="The short title for this image. If not provided, the disk's current label is used.")
    tags: Optional[Annotated[List[Annotated[str, Field(min_length=3, strict=True, max_length=100)]], Field(min_length=0, max_length=500)]] = Field(default=None, description="Tags used for organizational purposes. A tag can be from 3 to 100 characters long, and an image can have a maximum of 500 total tags.")
    __properties: ClassVar[List[str]] = ["cloud_init", "description", "disk_id", "label", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloud_init": obj.get("cloud_init"),
            "description": obj.get("description"),
            "disk_id": obj.get("disk_id"),
            "label": obj.get("label"),
            "tags": obj.get("tags")
        })
        return _obj


