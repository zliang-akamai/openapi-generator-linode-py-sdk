# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.get_child_accounts200_response_data_inner_credit_card import GetChildAccounts200ResponseDataInnerCreditCard
from typing import Optional, Set
from typing_extensions import Self

class ChildAccount(BaseModel):
    """
    Child account object.
    """ # noqa: E501
    active_since: Optional[datetime] = Field(default=None, description="The activation date and time for the child account.")
    address_1: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="First line of this child account's billing address.")
    address_2: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Second line of this child account's billing address, if applicable.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This child account's balance, in US dollars.")
    balance_uninvoiced: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This child account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.")
    billing_source: Optional[StrictStr] = Field(default=None, description="The source of service charges for this account, as determined by its relationship with Akamai. The API returns a value of `external` to describe a child account in a parent-child account environment.")
    capabilities: Optional[List[StrictStr]] = Field(default=None, description="A list of the capabilities the child account supports.")
    city: Optional[Annotated[str, Field(strict=True, max_length=24)]] = Field(default=None, description="The city for this child account's billing address.")
    company: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The company name for the owner of this child account. It can't include any of these characters: `<` `>` `(` `)` `\"` `=`. You can't change this value yourself. We use it to create the proxy users that a parent account uses to access a child account. Talk to your account team if you need to change this value.")
    country: Optional[StrictStr] = Field(default=None, description="The two-letter ISO 3166 country code for this child account's billing address.")
    credit_card: Optional[GetChildAccounts200ResponseDataInnerCreditCard] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The email address of the owner of this child account.")
    euuid: Optional[StrictStr] = Field(default=None, description="An external, unique identifier that Akamai assigned to the child account.")
    first_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The first name of the owner of this child account. It can't include any of these characters: `<` `>` `(` `)` `\"` `=`.")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The last name of the owner of this child account. It can't include any of these characters: `<` `>` `(` `)` `\"` `=`.")
    phone: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The phone number for the owner of this child account.")
    state: Optional[Annotated[str, Field(strict=True, max_length=24)]] = Field(default=None, description="The state or province for the billing address (`address_1` and `address_2, if applicable`). If in the United States (US) or Canada (CA), this is the two-letter ISO 3166 State or Province code.  __Note__. If this is a US military address, use state abbreviations (AA, AE, AP).")
    tax_id: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="The tax identification number for this child account. Use this for tax calculations in some countries. If you live in a country that doesn't collect taxes, ensure this is an empty string (`\"\"`).")
    zip: Optional[StrictStr] = Field(default=None, description="The zip code of this Account's billing address. The following restrictions apply:  - Can only contain ASCII letters, numbers, and hyphens (`-`). - Can't contain more than 9 letter or number characters.")
    __properties: ClassVar[List[str]] = ["active_since", "address_1", "address_2", "balance", "balance_uninvoiced", "billing_source", "capabilities", "city", "company", "country", "credit_card", "email", "euuid", "first_name", "last_name", "phone", "state", "tax_id", "zip"]

    @field_validator('billing_source')
    def billing_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['external']):
            raise ValueError("must be one of enum values ('external')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChildAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_since",
            "balance",
            "balance_uninvoiced",
            "billing_source",
            "capabilities",
            "euuid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit_card
        if self.credit_card:
            _dict['credit_card'] = self.credit_card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChildAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_since": obj.get("active_since"),
            "address_1": obj.get("address_1"),
            "address_2": obj.get("address_2"),
            "balance": obj.get("balance"),
            "balance_uninvoiced": obj.get("balance_uninvoiced"),
            "billing_source": obj.get("billing_source"),
            "capabilities": obj.get("capabilities"),
            "city": obj.get("city"),
            "company": obj.get("company"),
            "country": obj.get("country"),
            "credit_card": GetChildAccounts200ResponseDataInnerCreditCard.from_dict(obj["credit_card"]) if obj.get("credit_card") is not None else None,
            "email": obj.get("email"),
            "euuid": obj.get("euuid"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "tax_id": obj.get("tax_id"),
            "zip": obj.get("zip")
        })
        return _obj


