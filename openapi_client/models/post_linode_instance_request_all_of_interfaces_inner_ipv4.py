# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostLinodeInstanceRequestAllOfInterfacesInnerIpv4(BaseModel):
    """
    IPv4 addresses configured for this Interface. Only allowed for `vpc` type Interfaces. Returns `null` if no `vpc` Interface is assigned.
    """ # noqa: E501
    nat_1_1: Optional[StrictStr] = Field(default=None, description="The 1:1 NAT IPv4 address, used to associate a public IPv4 address with the VPC Subnet IPv4 address assigned to this Interface.  - Only allowed for `vpc` type Interfaces. - Returns `null` if no 1:1 NAT is set for a `vpc` type Interface. - Returns an empty string (`\"\"`) for non-`vpc` type Interfaces.  For requests:  - Setting this value to `any` enables the Linode's assigned public IPv4 address on this Interface and establishes a 1:1 NAT between the public IPv4 and VPC Subnet IPv4 addresses. - Setting the value to a specific public IPv4 address that is assigned to the Linode enables a 1:1 NAT between that address and the VPC Subnet IPv4 address. - The public IPv4 address can't be shared with another Linode. - If omitted, set to `null`, or set to an empty string (`\"\"`), no 1:1 NAT is established.  > ðŸ“˜ > > When creating a new compute instance, you can't set this to a specific IPv4 address. When a new compute instance is created, the network establishes a public IPv4 address for it. Since this address doesn't exist yet, you can't include a custom IPv4 address to change it. Once your compute instance is created, you can [update your configuration profile interface](https://www.linode.com/docs/api/linode-instances/#configuration-profile-interface-update) to change the `nat_1_1` address.")
    vpc: Optional[StrictStr] = Field(default=None, description="The VPC Subnet IPv4 address for this Interface.  - Only allowed for `vpc` type Interfaces. - Returns an empty string (`\"\"`) for non-`vpc` type Interfaces.  For requests:  - Must not already be actively assigned as an address or within a range to any Linodes. - Must not be the first two or last two addresses in the Subnet IPv4 Range. - If omitted, a valid address within the Subnet IPv4 range is automatically assigned.")
    __properties: ClassVar[List[str]] = ["nat_1_1", "vpc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostLinodeInstanceRequestAllOfInterfacesInnerIpv4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if nat_1_1 (nullable) is None
        # and model_fields_set contains the field
        if self.nat_1_1 is None and "nat_1_1" in self.model_fields_set:
            _dict['nat_1_1'] = None

        # set to None if vpc (nullable) is None
        # and model_fields_set contains the field
        if self.vpc is None and "vpc" in self.model_fields_set:
            _dict['vpc'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostLinodeInstanceRequestAllOfInterfacesInnerIpv4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nat_1_1": obj.get("nat_1_1"),
            "vpc": obj.get("vpc")
        })
        return _obj


