# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_migrate_linode_instance_request_placement_group import PostMigrateLinodeInstanceRequestPlacementGroup
from typing import Optional, Set
from typing_extensions import Self

class PostMigrateLinodeInstanceRequest(BaseModel):
    """
    PostMigrateLinodeInstanceRequest
    """ # noqa: E501
    placement_group: Optional[PostMigrateLinodeInstanceRequestPlacementGroup] = None
    region: Optional[StrictStr] = Field(default=None, description="The region to which the Linode will be migrated. Must be a valid region slug. A list of regions can be viewed by running the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation. A cross data center migration will cancel a pending migration that has not yet been initiated. A cross data center migration will initiate a `linode_migrate_datacenter_create` event.")
    type: Optional[StrictStr] = Field(default='cold', description="Type of migration used in moving to a new host or Linode type.  `warm`: the Linode will not power down until the migration is complete. Warm migrations are not available for DC migrations.  `cold`: the Linode will be powered down and migrated. When the migration is complete, the Linode will be powered on.")
    upgrade: Optional[StrictBool] = Field(default=False, description="When initiating a cross DC migration, setting this value to true will also ensure that the Linode is upgraded to the latest generation of hardware that corresponds to your Linode's Type, if any free upgrades are available for it. If no free upgrades are available, and this value is set to true, then the endpoint will return a 400 error code and the migration will not be performed. If the data center set in the `region` field does not allow upgrades, then the endpoint will return a 400 error code and the migration will not be performed.")
    __properties: ClassVar[List[str]] = ["placement_group", "region", "type", "upgrade"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['warm', 'cold']):
            raise ValueError("must be one of enum values ('warm', 'cold')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostMigrateLinodeInstanceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of placement_group
        if self.placement_group:
            _dict['placement_group'] = self.placement_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostMigrateLinodeInstanceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placement_group": PostMigrateLinodeInstanceRequestPlacementGroup.from_dict(obj["placement_group"]) if obj.get("placement_group") is not None else None,
            "region": obj.get("region"),
            "type": obj.get("type") if obj.get("type") is not None else 'cold',
            "upgrade": obj.get("upgrade") if obj.get("upgrade") is not None else False
        })
        return _obj


