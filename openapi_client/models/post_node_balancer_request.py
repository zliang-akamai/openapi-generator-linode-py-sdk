# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.post_node_balancer_request_configs_inner import PostNodeBalancerRequestConfigsInner
from typing import Optional, Set
from typing_extensions import Self

class PostNodeBalancerRequest(BaseModel):
    """
    PostNodeBalancerRequest
    """ # noqa: E501
    client_conn_throttle: Optional[Annotated[int, Field(le=20, strict=True, ge=0)]] = Field(default=None, description="Throttle connections per second.  Set to 0 (zero) to disable throttling.")
    configs: Optional[List[PostNodeBalancerRequestConfigsInner]] = Field(default=None, description="The port Configs to create for this NodeBalancer.  Each Config must have a unique port and at least one Node.")
    firewall_id: Optional[StrictInt] = Field(default=None, description="The ID of the Firewall to assign to the NodeBalancer.  - A NodeBalancer can have only one Firewall assigned to it. - Firewalls only apply to inbound TCP traffic to NodeBalancers.")
    label: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=32)]] = Field(default=None, description="This NodeBalancer's label. These must be unique on your Account.")
    region: StrictStr = Field(description="The ID of the Region to create this NodeBalancer in.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An array of Tags applied to this object. Tags are for organizational purposes only.")
    __properties: ClassVar[List[str]] = ["client_conn_throttle", "configs", "firewall_id", "label", "region", "tags"]

    @field_validator('label')
    def label_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9-_]{3,32}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z0-9-_]{3,32}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostNodeBalancerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item_configs in self.configs:
                if _item_configs:
                    _items.append(_item_configs.to_dict())
            _dict['configs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostNodeBalancerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_conn_throttle": obj.get("client_conn_throttle"),
            "configs": [PostNodeBalancerRequestConfigsInner.from_dict(_item) for _item in obj["configs"]] if obj.get("configs") is not None else None,
            "firewall_id": obj.get("firewall_id"),
            "label": obj.get("label"),
            "region": obj.get("region"),
            "tags": obj.get("tags")
        })
        return _obj


