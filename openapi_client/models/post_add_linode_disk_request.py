# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostAddLinodeDiskRequest(BaseModel):
    """
    PostAddLinodeDiskRequest
    """ # noqa: E501
    authorized_keys: Optional[List[StrictStr]] = Field(default=None, description="A list of public SSH keys that will be automatically appended to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.")
    authorized_users: Optional[List[StrictStr]] = Field(default=None, description="A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.")
    filesystem: Optional[StrictStr] = Field(default=None, description="The file system of the disk. This can be `raw`, which indicates no file system, just a raw binary stream, `swap` for a Linux swap area, `ext3` or `ext4` for the ext3 of ext4 journaling file systems for Linux, respectively, or `initrd` for uncompressed initrd, ext2 with a maximum size of 32 MB.")
    image: Optional[StrictStr] = Field(default=None, description="An Image ID to deploy the Linode Disk from.  Run the [List images](https://techdocs.akamai.com/linode-api/reference/get-images) operation with authentication to view all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Run the [Update a user's grants](https://techdocs.akamai.com/linode-api/reference/put-user-grants) operation to adjust permissions for an Account Image.")
    label: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=48)]] = Field(default=None, description="The name of the disk. This is for display purposes only.")
    root_pass: Optional[Annotated[str, Field(min_length=7, strict=True, max_length=128)]] = Field(default=None, description="This sets the root user's password on a newly created Linode Disk when deploying from an Image.  - __Required__ when creating a Linode Disk from an Image, including when using a StackScript.  - Must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.")
    size: StrictInt = Field(description="The size of the Disk in MB.  Images require a minimum size. Run the [Get an image](https://techdocs.akamai.com/linode-api/reference/get-image) operation to view its size.")
    stackscript_data: Optional[Dict[str, Any]] = Field(default=None, description="This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](https://www.linode.com/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.  This field is required to be valid JSON.  Total length cannot exceed 65,535 characters.")
    stackscript_id: Optional[StrictInt] = Field(default=None, description="A StackScript ID that will cause the referenced StackScript to be run during deployment of this Linode. A compatible `image` is required to use a StackScript. To get a list of available StackScript and their permitted Images, run [List StackScripts](https://techdocs.akamai.com/linode-api/reference/get-stack-scripts). This field cannot be used when deploying from a Backup or a Private Image.")
    __properties: ClassVar[List[str]] = ["authorized_keys", "authorized_users", "filesystem", "image", "label", "root_pass", "size", "stackscript_data", "stackscript_id"]

    @field_validator('filesystem')
    def filesystem_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['raw', 'swap', 'ext3', 'ext4', 'initrd']):
            raise ValueError("must be one of enum values ('raw', 'swap', 'ext3', 'ext4', 'initrd')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAddLinodeDiskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAddLinodeDiskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorized_keys": obj.get("authorized_keys"),
            "authorized_users": obj.get("authorized_users"),
            "filesystem": obj.get("filesystem"),
            "image": obj.get("image"),
            "label": obj.get("label"),
            "root_pass": obj.get("root_pass"),
            "size": obj.get("size"),
            "stackscript_data": obj.get("stackscript_data"),
            "stackscript_id": obj.get("stackscript_id")
        })
        return _obj


