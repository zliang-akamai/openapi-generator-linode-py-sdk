# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetKernels200ResponseDataInner(BaseModel):
    """
    Linux kernel object.
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="The architecture of this Kernel.")
    built: Optional[datetime] = Field(default=None, description="The date on which this Kernel was built.")
    deprecated: Optional[StrictBool] = Field(default=None, description="If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false.")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of this Kernel.")
    kvm: Optional[StrictBool] = Field(default=None, description="If this Kernel is suitable for KVM Linodes.")
    label: Optional[StrictStr] = Field(default=None, description="The friendly name of this Kernel.")
    pvops: Optional[StrictBool] = Field(default=None, description="If this Kernel is suitable for paravirtualized operations.")
    version: Optional[StrictStr] = Field(default=None, description="Linux Kernel version.")
    __properties: ClassVar[List[str]] = ["architecture", "built", "deprecated", "id", "kvm", "label", "pvops", "version"]

    @field_validator('architecture')
    def architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['x86_64', 'i386']):
            raise ValueError("must be one of enum values ('x86_64', 'i386')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetKernels200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "architecture",
            "built",
            "deprecated",
            "id",
            "kvm",
            "label",
            "pvops",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetKernels200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "built": obj.get("built"),
            "deprecated": obj.get("deprecated"),
            "id": obj.get("id"),
            "kvm": obj.get("kvm"),
            "label": obj.get("label"),
            "pvops": obj.get("pvops"),
            "version": obj.get("version")
        })
        return _obj


