# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostLkeClusterRequestNodePoolsInnerTaintsInner(BaseModel):
    """
    PostLkeClusterRequestNodePoolsInnerTaintsInner
    """ # noqa: E501
    effect: StrictStr = Field(description="The Kubernetes taint effect. For `NoSchedule`, `PreferNoSchedule` and `NoExecute` descriptions, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).")
    key: Annotated[str, Field(min_length=1, strict=True, max_length=63)] = Field(description="The Kubernetes taint key.  - A key can contain alphanumeric characters, dashes (`-`), underscores (`_`), or dots (`.`). Start and end it with an alphanumeric character.  - If the key begins with a DNS subdomain prefix followed by a single slash, for example `example.com/my-app`, the prefix part needs to adhere to [RFC 1123](https://datatracker.ietf.org/doc/html/rfc1123) DNS subdomain restrictions and be a maximum of 253 characters.")
    value: Annotated[str, Field(min_length=0, strict=True, max_length=63)] = Field(description="The Kubernetes taint value.  - A key can contain alphanumeric characters, dashes (`-`), underscores (`_`), or dots (`.`). Start and end it with an alphanumeric character.  - Can be specified as an empty string value with `\"\"`.")
    __properties: ClassVar[List[str]] = ["effect", "key", "value"]

    @field_validator('effect')
    def effect_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NoSchedule', 'PreferNoSchedule', 'NoExecute']):
            raise ValueError("must be one of enum values ('NoSchedule', 'PreferNoSchedule', 'NoExecute')")
        return value

    @field_validator('key')
    def key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([A-Za-z0-9][-A-Za-z0-9_.]*)?(\/)?([A-Za-z0-9][-A-Za-z0-9_.]{1,63})?$", value):
            raise ValueError(r"must validate the regular expression /^([A-Za-z0-9][-A-Za-z0-9_.]*)?(\/)?([A-Za-z0-9][-A-Za-z0-9_.]{1,63})?$/")
        return value

    @field_validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?", value):
            raise ValueError(r"must validate the regular expression /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostLkeClusterRequestNodePoolsInnerTaintsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostLkeClusterRequestNodePoolsInnerTaintsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "effect": obj.get("effect"),
            "key": obj.get("key"),
            "value": obj.get("value")
        })
        return _obj


