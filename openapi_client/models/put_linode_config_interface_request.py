# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_linode_instance_request_all_of_interfaces_inner_ipv4 import PostLinodeInstanceRequestAllOfInterfacesInnerIpv4
from typing import Optional, Set
from typing_extensions import Self

class PutLinodeConfigInterfaceRequest(BaseModel):
    """
    Linode Configuration Interface Update request object.
    """ # noqa: E501
    ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="An array of IPv4 CIDR VPC Subnet ranges that are routed to this Interface.  - Array items are only allowed for `vpc` type Interfaces. - This must be empty for non-`vpc` type Interfaces.  For requests:  - Addresses in submitted ranges must not already be actively assigned. - Submitting values replaces any existing values. - Submitting an empty array removes any existing values. - Omitting this property results in no change to existing values.")
    ipv4: Optional[PostLinodeInstanceRequestAllOfInterfacesInnerIpv4] = None
    primary: Optional[StrictBool] = Field(default=None, description="The primary Interface is configured as the default route to the Linode.  Each Configuration Profile can have up to one `\"primary\": true` Interface at a time.  Must be `false` for `vlan` type Interfaces.  If no Interface is configured as the primary, the first non-`vlan` type Interface in the `interfaces` array is automatically treated as the primary Interface.")
    __properties: ClassVar[List[str]] = ["ip_ranges", "ipv4", "primary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutLinodeConfigInterfaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv4
        if self.ipv4:
            _dict['ipv4'] = self.ipv4.to_dict()
        # set to None if ip_ranges (nullable) is None
        # and model_fields_set contains the field
        if self.ip_ranges is None and "ip_ranges" in self.model_fields_set:
            _dict['ip_ranges'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutLinodeConfigInterfaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ip_ranges": obj.get("ip_ranges"),
            "ipv4": PostLinodeInstanceRequestAllOfInterfacesInnerIpv4.from_dict(obj["ipv4"]) if obj.get("ipv4") is not None else None,
            "primary": obj.get("primary")
        })
        return _obj


