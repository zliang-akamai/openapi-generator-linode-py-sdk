# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_lke_clusters200_response_data_inner_control_plane_acl import GetLkeClusters200ResponseDataInnerControlPlaneAcl
from typing import Optional, Set
from typing_extensions import Self

class PutLkeClusterRequestControlPlane(BaseModel):
    """
    Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) and IP-based Access Control List (ACL) for Control Plane Components. Enabling of either of these for LKE is an __irreversible__ change.  When upgrading pre-existing LKE clusters to use the HA Control Plane, the following changes will additionally occur:  - All nodes will be deleted and new nodes will be created to replace them.  - Any local storage (such as `hostPath` volumes) will be erased.  - The upgrade process may take several minutes to complete, as nodes will be replaced on a rolling basis.  When upgrading pre-existing LKE clusters to use the ACL Control Plane, the following changes will additionally occur:  - All control plane access will go through a Cloud Firewall. There will be a period on which the FQDN DNS record needs to be propagated. Due to TTL and DNS caching, it could take several hours for external clients to switch over to the new mappings.
    """ # noqa: E501
    acl: Optional[GetLkeClusters200ResponseDataInnerControlPlaneAcl] = None
    high_availability: Optional[StrictBool] = Field(default=False, description="Enables High Availability for the Control Plane Components of the cluster. Defaults to `false`. Enabling High Availability for LKE is an __irreversible__ change.")
    __properties: ClassVar[List[str]] = ["acl", "high_availability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutLkeClusterRequestControlPlane from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acl
        if self.acl:
            _dict['acl'] = self.acl.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutLkeClusterRequestControlPlane from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acl": GetLkeClusters200ResponseDataInnerControlPlaneAcl.from_dict(obj["acl"]) if obj.get("acl") is not None else None,
            "high_availability": obj.get("high_availability") if obj.get("high_availability") is not None else False
        })
        return _obj


