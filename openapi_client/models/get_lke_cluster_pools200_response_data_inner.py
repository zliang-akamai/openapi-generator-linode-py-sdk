# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_lke_cluster_pools200_response_data_inner_autoscaler import GetLkeClusterPools200ResponseDataInnerAutoscaler
from openapi_client.models.get_lke_cluster_pools200_response_data_inner_labels import GetLkeClusterPools200ResponseDataInnerLabels
from openapi_client.models.get_lke_cluster_pools200_response_data_inner_nodes_inner import GetLkeClusterPools200ResponseDataInnerNodesInner
from openapi_client.models.get_lke_cluster_pools200_response_data_inner_taints_inner import GetLkeClusterPools200ResponseDataInnerTaintsInner
from openapi_client.models.post_lke_cluster_request_node_pools_inner_disks_inner import PostLkeClusterRequestNodePoolsInnerDisksInner
from typing import Optional, Set
from typing_extensions import Self

class GetLkeClusterPools200ResponseDataInner(BaseModel):
    """
    The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.
    """ # noqa: E501
    autoscaler: Optional[GetLkeClusterPools200ResponseDataInnerAutoscaler] = None
    count: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="The number of nodes in the Node Pool.")
    disk_encryption: Optional[StrictStr] = Field(default=None, description="For new LKE node pools, `disk_encryption` is automatically `enabled` where disk encryption is supported. It can't be `disabled`. For existing LKE node pools, this derives from the Linode's `disk_encryption` setting. If a Linode's node pool is not encrypted and you want an encrypted node pool, delete the node pool and create a new node pool.")
    disks: Optional[List[PostLkeClusterRequestNodePoolsInnerDisksInner]] = Field(default=None, description="This Node Pool's custom disk layout.")
    id: Optional[StrictInt] = Field(default=None, description="This Node Pool's unique ID.")
    labels: Optional[GetLkeClusterPools200ResponseDataInnerLabels] = None
    nodes: Optional[List[GetLkeClusterPools200ResponseDataInnerNodesInner]] = Field(default=None, description="Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An array of tags applied to this object. Tags are for organizational purposes only.")
    taints: Optional[List[GetLkeClusterPools200ResponseDataInnerTaintsInner]] = Field(default=None, description="Kubernetes taints added to nodes in the node pool. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.")
    type: Optional[StrictStr] = Field(default=None, description="The Linode Type for all of the nodes in the Node Pool.")
    __properties: ClassVar[List[str]] = ["autoscaler", "count", "disk_encryption", "disks", "id", "labels", "nodes", "tags", "taints", "type"]

    @field_validator('disk_encryption')
    def disk_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled']):
            raise ValueError("must be one of enum values ('enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLkeClusterPools200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaler
        if self.autoscaler:
            _dict['autoscaler'] = self.autoscaler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item_taints in self.taints:
                if _item_taints:
                    _items.append(_item_taints.to_dict())
            _dict['taints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLkeClusterPools200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscaler": GetLkeClusterPools200ResponseDataInnerAutoscaler.from_dict(obj["autoscaler"]) if obj.get("autoscaler") is not None else None,
            "count": obj.get("count"),
            "disk_encryption": obj.get("disk_encryption"),
            "disks": [PostLkeClusterRequestNodePoolsInnerDisksInner.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "id": obj.get("id"),
            "labels": GetLkeClusterPools200ResponseDataInnerLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "nodes": [GetLkeClusterPools200ResponseDataInnerNodesInner.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "tags": obj.get("tags"),
            "taints": [GetLkeClusterPools200ResponseDataInnerTaintsInner.from_dict(_item) for _item in obj["taints"]] if obj.get("taints") is not None else None,
            "type": obj.get("type")
        })
        return _obj


