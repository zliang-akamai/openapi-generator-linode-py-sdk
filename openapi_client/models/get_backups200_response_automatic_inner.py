# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_backups200_response_automatic_inner_all_of_disks_inner import GetBackups200ResponseAutomaticInnerAllOfDisksInner
from typing import Optional, Set
from typing_extensions import Self

class GetBackups200ResponseAutomaticInner(BaseModel):
    """
    GetBackups200ResponseAutomaticInner
    """ # noqa: E501
    available: Optional[StrictBool] = Field(default=None, description="Whether this Backup is available for restoration.  Backups undergoing maintenance are not available for restoration.")
    configs: Optional[List[StrictStr]] = Field(default=None, description="A list of the labels of the Configuration profiles that are part of the Backup.")
    created: Optional[datetime] = Field(default=None, description="The date the Backup was taken.")
    disks: Optional[List[GetBackups200ResponseAutomaticInnerAllOfDisksInner]] = Field(default=None, description="A list of the disks that are part of the Backup.")
    finished: Optional[datetime] = Field(default=None, description="The date the Backup completed.")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of this Backup.")
    label: Optional[StrictStr] = Field(default=None, description="A label for Backups that are of type `snapshot`.")
    status: Optional[StrictStr] = Field(default=None, description="The current state of a specific Backup.")
    type: Optional[StrictStr] = None
    updated: Optional[datetime] = Field(default=None, description="The date the Backup was most recently updated.")
    __properties: ClassVar[List[str]] = ["available", "configs", "created", "disks", "finished", "id", "label", "status", "type", "updated"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['paused', 'pending', 'running', 'needsPostProcessing', 'successful', 'failed', 'userAborted']):
            raise ValueError("must be one of enum values ('paused', 'pending', 'running', 'needsPostProcessing', 'successful', 'failed', 'userAborted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBackups200ResponseAutomaticInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "available",
            "configs",
            "created",
            "disks",
            "finished",
            "id",
            "status",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBackups200ResponseAutomaticInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available": obj.get("available"),
            "configs": obj.get("configs"),
            "created": obj.get("created"),
            "disks": [GetBackups200ResponseAutomaticInnerAllOfDisksInner.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "finished": obj.get("finished"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "updated": obj.get("updated")
        })
        return _obj


