# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_databases_types200_response_all_of_data_inner_engines import GetDatabasesTypes200ResponseAllOfDataInnerEngines
from typing import Optional, Set
from typing_extensions import Self

class GetDatabasesTypes200ResponseAllOfDataInner(BaseModel):
    """
    Managed Database plan type object.
    """ # noqa: E501
    var_class: Optional[StrictStr] = Field(default=None, description="The compute class category.", alias="class")
    deprecated: Optional[StrictBool] = Field(default=None, description="Whether this Database plan type has been deprecated and is no longer available.")
    disk: Optional[StrictInt] = Field(default=None, description="The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes.")
    engines: Optional[GetDatabasesTypes200ResponseAllOfDataInnerEngines] = None
    id: Optional[StrictStr] = Field(default=None, description="The ID representing the Managed Database node plan type.")
    label: Optional[StrictStr] = Field(default=None, description="A human-readable string that describes each plan type. For display purposes only.")
    memory: Optional[StrictInt] = Field(default=None, description="The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes.")
    vcpus: Optional[StrictInt] = Field(default=None, description="The number of CPUs allocated to databases of this plan type.")
    __properties: ClassVar[List[str]] = ["class", "deprecated", "disk", "engines", "id", "label", "memory", "vcpus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDatabasesTypes200ResponseAllOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "label",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of engines
        if self.engines:
            _dict['engines'] = self.engines.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDatabasesTypes200ResponseAllOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "class": obj.get("class"),
            "deprecated": obj.get("deprecated"),
            "disk": obj.get("disk"),
            "engines": GetDatabasesTypes200ResponseAllOfDataInnerEngines.from_dict(obj["engines"]) if obj.get("engines") is not None else None,
            "id": obj.get("id"),
            "label": obj.get("label"),
            "memory": obj.get("memory"),
            "vcpus": obj.get("vcpus")
        })
        return _obj


