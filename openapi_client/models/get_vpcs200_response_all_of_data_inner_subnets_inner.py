# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_vpcs200_response_all_of_data_inner_subnets_inner_linodes_inner import GetVpcs200ResponseAllOfDataInnerSubnetsInnerLinodesInner
from typing import Optional, Set
from typing_extensions import Self

class GetVpcs200ResponseAllOfDataInnerSubnetsInner(BaseModel):
    """
    An object describing a VPC Subnet.
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The date-time of VPC Subnet creation.")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of the VPC Subnet.")
    ipv4: Optional[StrictStr] = Field(default=None, description="IPv4 range in CIDR canonical form.  - The range must belong to a private address space as defined in [RFC1918](https://datatracker.ietf.org/doc/html/rfc1918). - Allowed prefix lengths: 1-29. - The range must not overlap with 192.168.128.0/17. - The range must not overlap with other Subnets on the same VPC.")
    label: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="The VPC Subnet's label, for display purposes only.  - Must be unique among the VPC's Subnets. - Can only contain ASCII letters, numbers, and hyphens (`-`). You can't use two consecutive hyphens (`--`).")
    linodes: Optional[List[GetVpcs200ResponseAllOfDataInnerSubnetsInnerLinodesInner]] = Field(default=None, description="An array of Linode IDs assigned to the VPC Subnet.  A Linode is assigned to a VPC Subnet if it has a Configuration Profile with a `vpc` purpose interface with the subnet's `subnet_id`. Even if the Configuration Profile is not active, meaning the Linode does not have access to the Subnet, the Linode still appears in this array.")
    updated: Optional[datetime] = Field(default=None, description="The date-time of the most recent VPC Subnet update.")
    __properties: ClassVar[List[str]] = ["created", "id", "ipv4", "label", "linodes", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetVpcs200ResponseAllOfDataInnerSubnetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "id",
            "linodes",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in linodes (list)
        _items = []
        if self.linodes:
            for _item_linodes in self.linodes:
                if _item_linodes:
                    _items.append(_item_linodes.to_dict())
            _dict['linodes'] = _items
        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetVpcs200ResponseAllOfDataInnerSubnetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "id": obj.get("id"),
            "ipv4": obj.get("ipv4"),
            "label": obj.get("label"),
            "linodes": [GetVpcs200ResponseAllOfDataInnerSubnetsInnerLinodesInner.from_dict(_item) for _item in obj["linodes"]] if obj.get("linodes") is not None else None,
            "updated": obj.get("updated")
        })
        return _obj


