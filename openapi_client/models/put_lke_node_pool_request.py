# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.post_lke_cluster_request_node_pools_inner_autoscaler import PostLkeClusterRequestNodePoolsInnerAutoscaler
from openapi_client.models.post_lke_cluster_request_node_pools_inner_taints_inner import PostLkeClusterRequestNodePoolsInnerTaintsInner
from typing import Optional, Set
from typing_extensions import Self

class PutLkeNodePoolRequest(BaseModel):
    """
    PutLkeNodePoolRequest
    """ # noqa: E501
    autoscaler: Optional[PostLkeClusterRequestNodePoolsInnerAutoscaler] = None
    count: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="The number of nodes in the Node Pool.")
    labels: Optional[List[object]] = Field(default=None, description="Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE node pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).  Specifying an empty dictionary value will remove all previously set labels.")
    taints: Optional[Annotated[List[PostLkeClusterRequestNodePoolsInnerTaintsInner], Field(min_length=1)]] = Field(default=None, description="Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add labels and taints to your LKE node pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).  Specifying an empty array (`[]`) removes all previously set taints.")
    __properties: ClassVar[List[str]] = ["autoscaler", "count", "labels", "taints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutLkeNodePoolRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaler
        if self.autoscaler:
            _dict['autoscaler'] = self.autoscaler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item_taints in self.taints:
                if _item_taints:
                    _items.append(_item_taints.to_dict())
            _dict['taints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutLkeNodePoolRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscaler": PostLkeClusterRequestNodePoolsInnerAutoscaler.from_dict(obj["autoscaler"]) if obj.get("autoscaler") is not None else None,
            "count": obj.get("count"),
            "taints": [PostLkeClusterRequestNodePoolsInnerTaintsInner.from_dict(_item) for _item in obj["taints"]] if obj.get("taints") is not None else None
        })
        return _obj


