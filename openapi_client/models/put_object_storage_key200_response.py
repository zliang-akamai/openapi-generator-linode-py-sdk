# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.put_object_storage_key200_response_regions_inner import PutObjectStorageKey200ResponseRegionsInner
from typing import Optional, Set
from typing_extensions import Self

class PutObjectStorageKey200Response(BaseModel):
    """
    An updated Object Storage key used to communicate with the Object Storage S3 API.
    """ # noqa: E501
    access_key: Optional[StrictStr] = Field(default=None, description="A unique string chosen by the API to identify this key. Used as a user name to identify this key when making requests to the S3 API.")
    id: Optional[StrictInt] = Field(default=None, description="This Object Storage key's unique numeric identifier.")
    label: Optional[StrictStr] = Field(default=None, description="The label given to this key. For display purposes only.")
    limited: Optional[StrictBool] = Field(default=None, description="Whether this Object Storage key limits access to specific buckets and permissions. Returns `false` if this key grants full access.  > ðŸ“˜ > > The `bucket_access` array that contains limited Object Storage key settings doesn't appear in this response. Store this key's `id` from the response and run [Get an Object Storage key](https://techdocs.akamai.com/linode-api/reference/get-object-storage-key) to view these settings.")
    regions: Optional[List[PutObjectStorageKey200ResponseRegionsInner]] = Field(default=None, description="The key can be used in these regions to create new buckets, but it can't be used to manage content in those buckets. See [Create an Object Storage key](https://techdocs.akamai.com/linode-api/reference/post-object-storage-keys) for more details.")
    secret_key: Optional[StrictStr] = Field(default=None, description="This Object Storage key's secret key. Used as a password to validate this key when making requests to the S3 API. This value is only revealed in a response after creating or modifying a key.")
    __properties: ClassVar[List[str]] = ["access_key", "id", "label", "limited", "regions", "secret_key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutObjectStorageKey200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_key",
            "id",
            "limited",
            "secret_key",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item_regions in self.regions:
                if _item_regions:
                    _items.append(_item_regions.to_dict())
            _dict['regions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutObjectStorageKey200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_key": obj.get("access_key"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "limited": obj.get("limited"),
            "regions": [PutObjectStorageKey200ResponseRegionsInner.from_dict(_item) for _item in obj["regions"]] if obj.get("regions") is not None else None,
            "secret_key": obj.get("secret_key")
        })
        return _obj


