# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetProfileApps200ResponseDataInner(BaseModel):
    """
    An application you have authorized access to your Account through OAuth.
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="When this app was authorized.")
    expiry: Optional[datetime] = Field(default=None, description="When the app's access to your account expires. If `null`, the app's access must be revoked manually.")
    id: Optional[StrictInt] = Field(default=None, description="This authorization's ID, used for revoking access.")
    label: Optional[StrictStr] = Field(default=None, description="The name of the application you've authorized.")
    scopes: Optional[StrictStr] = Field(default=None, description="The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="The URL at which this app's thumbnail may be accessed.")
    website: Optional[StrictStr] = Field(default=None, description="The website where you can get more information about this app.")
    __properties: ClassVar[List[str]] = ["created", "expiry", "id", "label", "scopes", "thumbnail_url", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProfileApps200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "expiry",
            "id",
            "label",
            "scopes",
            "thumbnail_url",
            "website",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expiry (nullable) is None
        # and model_fields_set contains the field
        if self.expiry is None and "expiry" in self.model_fields_set:
            _dict['expiry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProfileApps200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "expiry": obj.get("expiry"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "scopes": obj.get("scopes"),
            "thumbnail_url": obj.get("thumbnail_url"),
            "website": obj.get("website")
        })
        return _obj


