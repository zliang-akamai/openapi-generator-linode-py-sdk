# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_notifications200_response_data_inner_entity import GetNotifications200ResponseDataInnerEntity
from typing import Optional, Set
from typing_extensions import Self

class GetNotifications200ResponseDataInner(BaseModel):
    """
    An important, often time-sensitive item related to your account.
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="A full description of this notification, in markdown format. Not all notifications include a `body`.")
    entity: Optional[GetNotifications200ResponseDataInnerEntity] = None
    label: Optional[StrictStr] = Field(default=None, description="A short description of this notification.")
    message: Optional[StrictStr] = Field(default=None, description="A human-readable description of the notification.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of this notification. This field determines how prominently the notification is displayed and the color of the display text.")
    type: Optional[StrictStr] = Field(default=None, description="The type of notification.")
    until: Optional[datetime] = Field(default=None, description="If this notification has a duration, this is when the event or action will complete. For example, if there's scheduled maintenance for one of our systems, `until` represents the end of the maintenance window.")
    when: Optional[datetime] = Field(default=None, description="If this notification is for an event in the future, this specifies when the action occurs. For example, if a compute instance needs to migrate in response to a security advisory, this field sets the approximate time the compute instance will be taken offline for migration.")
    __properties: ClassVar[List[str]] = ["body", "entity", "label", "message", "severity", "type", "until", "when"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['minor', 'major', 'critical']):
            raise ValueError("must be one of enum values ('minor', 'major', 'critical')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['migration_scheduled', 'migration_imminent', 'migration_pending', 'reboot_scheduled', 'outage', 'payment_due', 'ticket_important', 'ticket_abuse', 'notice', 'maintenance', 'promotion']):
            raise ValueError("must be one of enum values ('migration_scheduled', 'migration_imminent', 'migration_pending', 'reboot_scheduled', 'outage', 'payment_due', 'ticket_important', 'ticket_abuse', 'notice', 'maintenance', 'promotion')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetNotifications200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "body",
            "label",
            "message",
            "severity",
            "type",
            "until",
            "when",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetNotifications200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "entity": GetNotifications200ResponseDataInnerEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "label": obj.get("label"),
            "message": obj.get("message"),
            "severity": obj.get("severity"),
            "type": obj.get("type"),
            "until": obj.get("until"),
            "when": obj.get("when")
        })
        return _obj


