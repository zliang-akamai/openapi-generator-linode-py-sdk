# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.added_get_user200_all_of_last_login import AddedGetUser200AllOfLastLogin
from typing import Optional, Set
from typing_extensions import Self

class AddedPutUser200(BaseModel):
    """
    AddedPutUser200
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.")
    last_login: Optional[AddedGetUser200AllOfLastLogin] = None
    password_created: Optional[datetime] = Field(default=None, description="The date and time when this User's current password was created.  User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.  `null` if this User has not created a password yet.")
    restricted: Optional[StrictBool] = Field(default=None, description="If true, the User must be granted access to perform actions or access entities on this Account. Run [List a user's grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for details on how to configure grants for a restricted User.")
    ssh_keys: Optional[List[StrictStr]] = Field(default=None, description="A list of SSH Key labels added by this User.  Users can add keys with the [Add an SSH key](https://techdocs.akamai.com/linode-api/reference/post-add-ssh-key) operation.  These keys are deployed when this User is included in the `authorized_users` field of the following requests:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Rebuild a Linode](https://techdocs.akamai.com/linode-api/reference/post-rebuild-linode-instance) - [Create a disk](https://techdocs.akamai.com/linode-api/reference/post-add-linode-disk)")
    tfa_enabled: Optional[StrictBool] = Field(default=None, description="A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. Run the [Create a two factor secret](https://techdocs.akamai.com/linode-api/reference/post-tfa-enable) operation to enable TFA.")
    username: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=32)]] = Field(default=None, description="The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).")
    verified_phone_number: Optional[StrictStr] = Field(default=None, description="The phone number verified for this User Profile with the [Verify a phone number](https://techdocs.akamai.com/linode-api/reference/post-profile-phone-number-verify) operation.  `null` if this User Profile has no verified phone number.")
    user_type: Optional[StrictStr] = Field(default=None, description="If the user belongs to a [parent or child account](https://www.linode.com/docs/guides/parent-child-accounts/) relationship, this defines the user type in the respective account. Possible values include:  - `parent`. This is a user in an Akamai partner account. Akamai partners have a contractural relationship with their end customers, to sell Akamai services. This user can either have full access (a parent account admin user) or limited access. Limited users don't have access to manage child accounts, but they can be granted this access by an admin user.  - `child`. This is an Akamai partner's end customer user, in a child account. A child user can have either full or limited access. Full access lets the user manage other child users and the proxy user in a child account.  - `proxy`. This is a user on a child account that gives parent account users access to that child account. A parent account user with the `child_account_access` grant can [Create a proxy user token](https://techdocs.akamai.com/linode-api/reference/post-child-account-token) from the parent account. The parent user can use this token to run API operations from the child account, as if they were a child user.  - `default`. This applies to all regular, non-parent-child account users.")
    __properties: ClassVar[List[str]] = ["email", "last_login", "password_created", "restricted", "ssh_keys", "tfa_enabled", "username", "verified_phone_number", "user_type"]

    @field_validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]((?![_-]{2,})[a-zA-Z0-9-_])+[a-zA-Z0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]((?![_-]{2,})[a-zA-Z0-9-_])+[a-zA-Z0-9]$/")
        return value

    @field_validator('user_type')
    def user_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['parent', 'child', 'proxy', 'default']):
            raise ValueError("must be one of enum values ('parent', 'child', 'proxy', 'default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddedPutUser200 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "password_created",
            "ssh_keys",
            "tfa_enabled",
            "verified_phone_number",
            "user_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_login
        if self.last_login:
            _dict['last_login'] = self.last_login.to_dict()
        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['last_login'] = None

        # set to None if password_created (nullable) is None
        # and model_fields_set contains the field
        if self.password_created is None and "password_created" in self.model_fields_set:
            _dict['password_created'] = None

        # set to None if verified_phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.verified_phone_number is None and "verified_phone_number" in self.model_fields_set:
            _dict['verified_phone_number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddedPutUser200 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "last_login": AddedGetUser200AllOfLastLogin.from_dict(obj["last_login"]) if obj.get("last_login") is not None else None,
            "password_created": obj.get("password_created"),
            "restricted": obj.get("restricted"),
            "ssh_keys": obj.get("ssh_keys"),
            "tfa_enabled": obj.get("tfa_enabled"),
            "username": obj.get("username"),
            "verified_phone_number": obj.get("verified_phone_number"),
            "user_type": obj.get("user_type")
        })
        return _obj


