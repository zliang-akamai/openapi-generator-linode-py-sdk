# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetLinodeIps200ResponseIpv4VpcInner(BaseModel):
    """
    A VPC IP address that exists in Linode's system, specific to the response for the [List VPC IP addresses](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips) operation. Returned as an empty set for Linodes that are not part of a VPC.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Returns `true` if the VPC interface is in use, meaning that the Linode was powered on using the `config_id` to which the interface belongs. Otherwise returns `false`.")
    address: Optional[StrictStr] = Field(default=None, description="An IPv4 address configured for this VPC interface. These follow the [RFC 1918](https://datatracker.ietf.org/doc/html/rfc1918) private address format. Displayed as `null` if an `address_range`.")
    address_range: Optional[StrictStr] = Field(default=None, description="A range of IPv4 addresses configured for this VPC interface. Displayed as `null` if a single `address`.")
    config_id: Optional[StrictInt] = Field(default=None, description="The globally general entity identifier for the Linode configuration profile where the VPC is included.")
    gateway: Optional[StrictStr] = Field(default=None, description="The default gateway for the VPC subnet that the IP or IP range belongs to.")
    interface_id: Optional[StrictInt] = Field(default=None, description="The globally general API entity identifier for the Linode interface.")
    linode_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Linode the VPC interface currently belongs to.")
    nat_1_1: Optional[StrictStr] = Field(default=None, description="The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn't used.")
    prefix: Optional[StrictInt] = Field(default=None, description="The number of bits set in the `subnet_mask`.")
    region: Optional[StrictStr] = Field(default=None, description="The region of the VPC.")
    subnet_id: Optional[StrictInt] = Field(default=None, description="The `id` of the VPC Subnet for this interface.")
    subnet_mask: Optional[StrictStr] = Field(default=None, description="The mask that separates host bits from network bits for the `address` or `address_range`.")
    vpc_id: Optional[StrictInt] = Field(default=None, description="The unique globally general API entity identifier for the VPC.")
    __properties: ClassVar[List[str]] = ["active", "address", "address_range", "config_id", "gateway", "interface_id", "linode_id", "nat_1_1", "prefix", "region", "subnet_id", "subnet_mask", "vpc_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLinodeIps200ResponseIpv4VpcInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active",
            "address",
            "address_range",
            "config_id",
            "gateway",
            "interface_id",
            "linode_id",
            "nat_1_1",
            "prefix",
            "region",
            "subnet_mask",
            "vpc_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if address_range (nullable) is None
        # and model_fields_set contains the field
        if self.address_range is None and "address_range" in self.model_fields_set:
            _dict['address_range'] = None

        # set to None if gateway (nullable) is None
        # and model_fields_set contains the field
        if self.gateway is None and "gateway" in self.model_fields_set:
            _dict['gateway'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['prefix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLinodeIps200ResponseIpv4VpcInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "address": obj.get("address"),
            "address_range": obj.get("address_range"),
            "config_id": obj.get("config_id"),
            "gateway": obj.get("gateway"),
            "interface_id": obj.get("interface_id"),
            "linode_id": obj.get("linode_id"),
            "nat_1_1": obj.get("nat_1_1"),
            "prefix": obj.get("prefix"),
            "region": obj.get("region"),
            "subnet_id": obj.get("subnet_id"),
            "subnet_mask": obj.get("subnet_mask"),
            "vpc_id": obj.get("vpc_id")
        })
        return _obj


