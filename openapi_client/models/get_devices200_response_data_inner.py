# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetDevices200ResponseDataInner(BaseModel):
    """
    A trusted device object represents an active Remember Me session with [login.linode.com](https://login.linode.com).
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="When this Remember Me session was started.  This corresponds to the time of login with the \"Remember Me\" box checked.")
    expiry: Optional[datetime] = Field(default=None, description="When this TrustedDevice session expires.  Sessions typically last 30 days.")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID for this TrustedDevice.")
    last_authenticated: Optional[datetime] = Field(default=None, description="The last time this TrustedDevice was successfully used to authenticate to [login.linode.com](https://login.linode.com).")
    last_remote_addr: Optional[StrictStr] = Field(default=None, description="The last IP Address to successfully authenticate with this TrustedDevice.")
    user_agent: Optional[StrictStr] = Field(default=None, description="The User Agent of the browser that created this TrustedDevice session.")
    __properties: ClassVar[List[str]] = ["created", "expiry", "id", "last_authenticated", "last_remote_addr", "user_agent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDevices200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "expiry",
            "id",
            "last_authenticated",
            "last_remote_addr",
            "user_agent",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDevices200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "expiry": obj.get("expiry"),
            "id": obj.get("id"),
            "last_authenticated": obj.get("last_authenticated"),
            "last_remote_addr": obj.get("last_remote_addr"),
            "user_agent": obj.get("user_agent")
        })
        return _obj


