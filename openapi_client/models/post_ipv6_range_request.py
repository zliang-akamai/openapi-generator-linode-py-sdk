# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostIpv6RangeRequest(BaseModel):
    """
    PostIpv6RangeRequest
    """ # noqa: E501
    linode_id: Optional[StrictInt] = Field(default=None, description="The ID of the Linode to assign this range to. The SLAAC address for the provided Linode is used as the range's `route_target`.  - __Required__ if `route_target` is omitted from the request.  - Mutually exclusive with `route_target`. Submitting values for both properties in a request results in an error.")
    prefix_length: StrictInt = Field(description="The prefix length of the IPv6 range.")
    route_target: Optional[StrictStr] = Field(default=None, description="The IPv6 SLAAC address to assign this range to.  - __Required__ if `linode_id` is omitted from the request.  - Mutually exclusive with `linode_id`. Submitting values for both properties in a request results in an error.  - __Note__. Omit the `/128` prefix length of the SLAAC address when using this property.")
    __properties: ClassVar[List[str]] = ["linode_id", "prefix_length", "route_target"]

    @field_validator('prefix_length')
    def prefix_length_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([56, 64]):
            raise ValueError("must be one of enum values (56, 64)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostIpv6RangeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostIpv6RangeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linode_id": obj.get("linode_id"),
            "prefix_length": obj.get("prefix_length"),
            "route_target": obj.get("route_target")
        })
        return _obj


