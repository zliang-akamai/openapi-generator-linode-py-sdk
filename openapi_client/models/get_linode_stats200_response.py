# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.get_linode_stats200_response_io import GetLinodeStats200ResponseIo
from openapi_client.models.get_linode_stats200_response_netv4 import GetLinodeStats200ResponseNetv4
from openapi_client.models.get_linode_stats200_response_netv6 import GetLinodeStats200ResponseNetv6
from typing import Optional, Set
from typing_extensions import Self

class GetLinodeStats200Response(BaseModel):
    """
    CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in `[timestamp, reading]` array format. Timestamp is a UNIX timestamp in EST.
    """ # noqa: E501
    cpu: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Percentage of CPU used.")
    io: Optional[GetLinodeStats200ResponseIo] = None
    netv4: Optional[GetLinodeStats200ResponseNetv4] = None
    netv6: Optional[GetLinodeStats200ResponseNetv6] = None
    title: Optional[StrictStr] = Field(default=None, description="The title for this data set.")
    __properties: ClassVar[List[str]] = ["cpu", "io", "netv4", "netv6", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLinodeStats200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of io
        if self.io:
            _dict['io'] = self.io.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netv4
        if self.netv4:
            _dict['netv4'] = self.netv4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netv6
        if self.netv6:
            _dict['netv6'] = self.netv6.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLinodeStats200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpu": obj.get("cpu"),
            "io": GetLinodeStats200ResponseIo.from_dict(obj["io"]) if obj.get("io") is not None else None,
            "netv4": GetLinodeStats200ResponseNetv4.from_dict(obj["netv4"]) if obj.get("netv4") is not None else None,
            "netv6": GetLinodeStats200ResponseNetv6.from_dict(obj["netv6"]) if obj.get("netv6") is not None else None,
            "title": obj.get("title")
        })
        return _obj


