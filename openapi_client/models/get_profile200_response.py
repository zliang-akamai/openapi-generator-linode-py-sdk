# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_profile200_response_referrals import GetProfile200ResponseReferrals
from typing import Optional, Set
from typing_extensions import Self

class GetProfile200Response(BaseModel):
    """
    A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
    """ # noqa: E501
    authentication_type: Optional[StrictStr] = Field(default=None, description="This account's Cloud Manager authentication type. Authentication types are chosen through Cloud Manager and authorized when logging into your account. These authentication types are either the user's password (in conjunction with their username), or the name of their identity provider such as GitHub. For example, if a user:  - Has never used Third-Party Authentication, their authentication type will be `password`. - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`). - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.  __Note__. This functionality may not yet be available in Cloud Manager. See the [Cloud Manager Changelog](https://www.linode.com/docs/products/tools/cloud-manager/release-notes/) for the latest updates.")
    authorized_keys: Optional[List[StrictStr]] = Field(default=None, description="The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is `disabled`.")
    email: Optional[StrictStr] = Field(default=None, description="Your email address.  This address will be used for communication with Linode as necessary.")
    email_notifications: Optional[StrictBool] = Field(default=None, description="If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.")
    ip_whitelist_enabled: Optional[StrictBool] = Field(default=None, description="If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled. If you disable this setting, you will not be able to re-enable it.")
    lish_auth_method: Optional[StrictStr] = Field(default=None, description="The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](https://www.linode.com/docs/guides/lish/).  - `keys_only` is the most secure if you intend to use Lish. - `disabled` is recommended if you do not intend to use Lish at all. - If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [Get a profile](https://techdocs.akamai.com/linode-api/reference/get-profile) operation.")
    referrals: Optional[GetProfile200ResponseReferrals] = None
    restricted: Optional[StrictBool] = Field(default=None, description="If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, run [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants).")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.")
    two_factor_auth: Optional[StrictBool] = Field(default=None, description="If true, logins from untrusted computers will require Two Factor Authentication.  Run [Create a two factor secret](https://techdocs.akamai.com/linode-api/reference/post-tfa-enable) to enable Two Factor Authentication.")
    uid: Optional[StrictInt] = Field(default=None, description="Your unique ID in our system. This value will never change, and can safely be used to identify your User.")
    username: Optional[StrictStr] = Field(default=None, description="Your username, used for logging in to our system.")
    verified_phone_number: Optional[StrictStr] = Field(default=None, description="The phone number verified for this Profile with the [Verify a phone number](https://techdocs.akamai.com/linode-api/reference/post-profile-phone-number-verify) operation.  `null` if this Profile has no verified phone number.")
    __properties: ClassVar[List[str]] = ["authentication_type", "authorized_keys", "email", "email_notifications", "ip_whitelist_enabled", "lish_auth_method", "referrals", "restricted", "timezone", "two_factor_auth", "uid", "username", "verified_phone_number"]

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['password', 'github']):
            raise ValueError("must be one of enum values ('password', 'github')")
        return value

    @field_validator('lish_auth_method')
    def lish_auth_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['password_keys', 'keys_only', 'disabled']):
            raise ValueError("must be one of enum values ('password_keys', 'keys_only', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProfile200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "authentication_type",
            "uid",
            "username",
            "verified_phone_number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of referrals
        if self.referrals:
            _dict['referrals'] = self.referrals.to_dict()
        # set to None if authorized_keys (nullable) is None
        # and model_fields_set contains the field
        if self.authorized_keys is None and "authorized_keys" in self.model_fields_set:
            _dict['authorized_keys'] = None

        # set to None if verified_phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.verified_phone_number is None and "verified_phone_number" in self.model_fields_set:
            _dict['verified_phone_number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProfile200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication_type": obj.get("authentication_type"),
            "authorized_keys": obj.get("authorized_keys"),
            "email": obj.get("email"),
            "email_notifications": obj.get("email_notifications"),
            "ip_whitelist_enabled": obj.get("ip_whitelist_enabled"),
            "lish_auth_method": obj.get("lish_auth_method"),
            "referrals": GetProfile200ResponseReferrals.from_dict(obj["referrals"]) if obj.get("referrals") is not None else None,
            "restricted": obj.get("restricted"),
            "timezone": obj.get("timezone"),
            "two_factor_auth": obj.get("two_factor_auth"),
            "uid": obj.get("uid"),
            "username": obj.get("username"),
            "verified_phone_number": obj.get("verified_phone_number")
        })
        return _obj


