# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_linode_ips200_response_ipv4_private_inner import GetLinodeIps200ResponseIpv4PrivateInner
from openapi_client.models.get_linode_ips200_response_ipv4_public_inner import GetLinodeIps200ResponseIpv4PublicInner
from openapi_client.models.get_linode_ips200_response_ipv4_vpc_inner import GetLinodeIps200ResponseIpv4VpcInner
from typing import Optional, Set
from typing_extensions import Self

class GetLinodeIps200ResponseIpv4(BaseModel):
    """
    Information about this Linode's IPv4 addresses.
    """ # noqa: E501
    private: Optional[List[GetLinodeIps200ResponseIpv4PrivateInner]] = Field(default=None, description="A list of private IP Address objects belonging to this Linode.")
    public: Optional[List[GetLinodeIps200ResponseIpv4PublicInner]] = Field(default=None, description="A list of public IP Address objects belonging to this Linode.")
    reserved: Optional[List[GetLinodeIps200ResponseIpv4PublicInner]] = Field(default=None, description="A list of reserved IP Address objects belonging to this Linode.")
    shared: Optional[List[GetLinodeIps200ResponseIpv4PublicInner]] = Field(default=None, description="A list of shared IP Address objects assigned to this Linode.")
    vpc: Optional[List[GetLinodeIps200ResponseIpv4VpcInner]] = Field(default=None, description="A list of Virtual Private Cloud (VPC)-specific addresses or ranges for the Linode.")
    __properties: ClassVar[List[str]] = ["private", "public", "reserved", "shared", "vpc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLinodeIps200ResponseIpv4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "private",
            "public",
            "reserved",
            "shared",
            "vpc",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in private (list)
        _items = []
        if self.private:
            for _item_private in self.private:
                if _item_private:
                    _items.append(_item_private.to_dict())
            _dict['private'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public (list)
        _items = []
        if self.public:
            for _item_public in self.public:
                if _item_public:
                    _items.append(_item_public.to_dict())
            _dict['public'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reserved (list)
        _items = []
        if self.reserved:
            for _item_reserved in self.reserved:
                if _item_reserved:
                    _items.append(_item_reserved.to_dict())
            _dict['reserved'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared (list)
        _items = []
        if self.shared:
            for _item_shared in self.shared:
                if _item_shared:
                    _items.append(_item_shared.to_dict())
            _dict['shared'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpc (list)
        _items = []
        if self.vpc:
            for _item_vpc in self.vpc:
                if _item_vpc:
                    _items.append(_item_vpc.to_dict())
            _dict['vpc'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLinodeIps200ResponseIpv4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "private": [GetLinodeIps200ResponseIpv4PrivateInner.from_dict(_item) for _item in obj["private"]] if obj.get("private") is not None else None,
            "public": [GetLinodeIps200ResponseIpv4PublicInner.from_dict(_item) for _item in obj["public"]] if obj.get("public") is not None else None,
            "reserved": [GetLinodeIps200ResponseIpv4PublicInner.from_dict(_item) for _item in obj["reserved"]] if obj.get("reserved") is not None else None,
            "shared": [GetLinodeIps200ResponseIpv4PublicInner.from_dict(_item) for _item in obj["shared"]] if obj.get("shared") is not None else None,
            "vpc": [GetLinodeIps200ResponseIpv4VpcInner.from_dict(_item) for _item in obj["vpc"]] if obj.get("vpc") is not None else None
        })
        return _obj


