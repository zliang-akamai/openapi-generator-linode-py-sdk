# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_stack_scripts200_response_data_inner_user_defined_fields_inner import GetStackScripts200ResponseDataInnerUserDefinedFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class PostAddStackScriptRequest(BaseModel):
    """
    PostAddStackScriptRequest
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The date this StackScript was created.")
    deployments_active: Optional[StrictInt] = Field(default=None, description="Count of currently active, deployed Linodes created from this StackScript.")
    deployments_total: Optional[StrictInt] = Field(default=None, description="The total number of times this StackScript has been deployed.")
    description: Optional[StrictStr] = Field(default=None, description="A description for the StackScript.")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of this StackScript.")
    images: List[StrictStr] = Field(description="An array of Image IDs. These are the Images that can be deployed with this StackScript.  `any/all` indicates that all available Images, including private Images, are accepted.")
    is_public: Optional[StrictBool] = Field(default=None, description="This determines whether other users can use your StackScript. __Once a StackScript is made public, it cannot be made private.__")
    label: Annotated[str, Field(min_length=3, strict=True, max_length=128)] = Field(description="The StackScript's label is for display purposes only.")
    mine: Optional[StrictBool] = Field(default=None, description="Returns `true` if this StackScript is owned by the account of the user making the request, and the user making the request is unrestricted or has access to this StackScript.")
    rev_note: Optional[StrictStr] = Field(default=None, description="This field allows you to add notes for the set of revisions made to this StackScript.")
    script: StrictStr = Field(description="The script to execute when provisioning a new Linode with this StackScript.")
    updated: Optional[datetime] = Field(default=None, description="The date this StackScript was last updated.")
    user_defined_fields: Optional[List[GetStackScripts200ResponseDataInnerUserDefinedFieldsInner]] = Field(default=None, description="This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](https://www.linode.com/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.")
    user_gravatar_id: Optional[StrictStr] = Field(default=None, description="The Gravatar ID for the User who created the StackScript.")
    username: Optional[StrictStr] = Field(default=None, description="The User who created the StackScript.")
    __properties: ClassVar[List[str]] = ["created", "deployments_active", "deployments_total", "description", "id", "images", "is_public", "label", "mine", "rev_note", "script", "updated", "user_defined_fields", "user_gravatar_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAddStackScriptRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "deployments_active",
            "deployments_total",
            "id",
            "mine",
            "updated",
            "user_defined_fields",
            "user_gravatar_id",
            "username",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_defined_fields (list)
        _items = []
        if self.user_defined_fields:
            for _item_user_defined_fields in self.user_defined_fields:
                if _item_user_defined_fields:
                    _items.append(_item_user_defined_fields.to_dict())
            _dict['user_defined_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAddStackScriptRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "deployments_active": obj.get("deployments_active"),
            "deployments_total": obj.get("deployments_total"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "images": obj.get("images"),
            "is_public": obj.get("is_public"),
            "label": obj.get("label"),
            "mine": obj.get("mine"),
            "rev_note": obj.get("rev_note"),
            "script": obj.get("script"),
            "updated": obj.get("updated"),
            "user_defined_fields": [GetStackScripts200ResponseDataInnerUserDefinedFieldsInner.from_dict(_item) for _item in obj["user_defined_fields"]] if obj.get("user_defined_fields") is not None else None,
            "user_gravatar_id": obj.get("user_gravatar_id"),
            "username": obj.get("username")
        })
        return _obj


