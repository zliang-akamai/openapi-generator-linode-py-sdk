# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetStackScripts200ResponseDataInnerUserDefinedFieldsInner(BaseModel):
    """
    A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.
    """ # noqa: E501
    default: Optional[StrictStr] = Field(default=None, description="The default value.  If not specified, this value will be used.")
    example: StrictStr = Field(description="An example value for the field.")
    label: StrictStr = Field(description="A human-readable label for the field that will serve as the input prompt for entering the value during deployment.")
    many_of: Optional[StrictStr] = Field(default=None, description="A list of acceptable values for the field in any quantity, combination or order.", alias="manyOf")
    name: StrictStr = Field(description="The name of the field.")
    one_of: Optional[StrictStr] = Field(default=None, description="A list of acceptable single values for the field.", alias="oneOf")
    __properties: ClassVar[List[str]] = ["default", "example", "label", "manyOf", "name", "oneOf"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetStackScripts200ResponseDataInnerUserDefinedFieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "default",
            "example",
            "label",
            "many_of",
            "name",
            "one_of",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetStackScripts200ResponseDataInnerUserDefinedFieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": obj.get("default"),
            "example": obj.get("example"),
            "label": obj.get("label"),
            "manyOf": obj.get("manyOf"),
            "name": obj.get("name"),
            "oneOf": obj.get("oneOf")
        })
        return _obj


