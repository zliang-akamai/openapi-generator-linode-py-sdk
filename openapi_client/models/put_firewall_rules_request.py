# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PutFirewallRulesRequest(BaseModel):
    """
    PutFirewallRulesRequest
    """ # noqa: E501
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint is a 32-bit hash. It represents the firewall rules as an 8 character hex string. You can use `fingerprint` to compare rule versions.")
    inbound: Optional[Any] = None
    inbound_policy: Optional[StrictStr] = Field(default=None, description="The default behavior for inbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `inbound.action` property of the Firewall Rule.")
    outbound: Optional[Any] = None
    outbound_policy: Optional[StrictStr] = Field(default=None, description="The default behavior for outbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `outbound.action` property of the Firewall Rule.")
    version: Optional[StrictInt] = Field(default=None, description="The firewall's rule version. The first version is `1`. The version number is incremented when the firewall's rules change.")
    __properties: ClassVar[List[str]] = ["fingerprint", "inbound", "inbound_policy", "outbound", "outbound_policy", "version"]

    @field_validator('inbound_policy')
    def inbound_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCEPT', 'DROP']):
            raise ValueError("must be one of enum values ('ACCEPT', 'DROP')")
        return value

    @field_validator('outbound_policy')
    def outbound_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCEPT', 'DROP']):
            raise ValueError("must be one of enum values ('ACCEPT', 'DROP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutFirewallRulesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "fingerprint",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if inbound (nullable) is None
        # and model_fields_set contains the field
        if self.inbound is None and "inbound" in self.model_fields_set:
            _dict['inbound'] = None

        # set to None if outbound (nullable) is None
        # and model_fields_set contains the field
        if self.outbound is None and "outbound" in self.model_fields_set:
            _dict['outbound'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutFirewallRulesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fingerprint": obj.get("fingerprint"),
            "inbound": obj.get("inbound"),
            "inbound_policy": obj.get("inbound_policy"),
            "outbound": obj.get("outbound"),
            "outbound_policy": obj.get("outbound_policy"),
            "version": obj.get("version")
        })
        return _obj


