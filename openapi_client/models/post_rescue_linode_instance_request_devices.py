# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_linode_configs200_response_data_inner_devices_sda import GetLinodeConfigs200ResponseDataInnerDevicesSda
from typing import Optional, Set
from typing_extensions import Self

class PostRescueLinodeInstanceRequestDevices(BaseModel):
    """
    PostRescueLinodeInstanceRequestDevices
    """ # noqa: E501
    sda: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sdb: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sdc: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sdd: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sde: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sdf: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    sdg: Optional[GetLinodeConfigs200ResponseDataInnerDevicesSda] = None
    __properties: ClassVar[List[str]] = ["sda", "sdb", "sdc", "sdd", "sde", "sdf", "sdg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostRescueLinodeInstanceRequestDevices from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sda
        if self.sda:
            _dict['sda'] = self.sda.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdb
        if self.sdb:
            _dict['sdb'] = self.sdb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdc
        if self.sdc:
            _dict['sdc'] = self.sdc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdd
        if self.sdd:
            _dict['sdd'] = self.sdd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sde
        if self.sde:
            _dict['sde'] = self.sde.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdf
        if self.sdf:
            _dict['sdf'] = self.sdf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdg
        if self.sdg:
            _dict['sdg'] = self.sdg.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostRescueLinodeInstanceRequestDevices from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sda": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sda"]) if obj.get("sda") is not None else None,
            "sdb": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sdb"]) if obj.get("sdb") is not None else None,
            "sdc": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sdc"]) if obj.get("sdc") is not None else None,
            "sdd": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sdd"]) if obj.get("sdd") is not None else None,
            "sde": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sde"]) if obj.get("sde") is not None else None,
            "sdf": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sdf"]) if obj.get("sdf") is not None else None,
            "sdg": GetLinodeConfigs200ResponseDataInnerDevicesSda.from_dict(obj["sdg"]) if obj.get("sdg") is not None else None
        })
        return _obj


