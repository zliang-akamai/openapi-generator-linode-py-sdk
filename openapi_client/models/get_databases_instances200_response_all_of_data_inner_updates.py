# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetDatabasesInstances200ResponseAllOfDataInnerUpdates(BaseModel):
    """
    Configuration settings for automated patch update maintenance for the Managed Database.
    """ # noqa: E501
    day_of_week: Optional[Annotated[int, Field(le=7, strict=True, ge=1)]] = Field(default=None, description="The day to perform maintenance. 1=Monday, 2=Tuesday, etc.")
    duration: Optional[Annotated[int, Field(le=3, strict=True, ge=1)]] = Field(default=None, description="The maximum maintenance window time in hours.")
    frequency: Optional[StrictStr] = Field(default='weekly', description="Whether maintenance occurs on a weekly or monthly basis.")
    hour_of_day: Optional[Annotated[int, Field(le=23, strict=True, ge=0)]] = Field(default=None, description="The hour to begin maintenance based in UTC time.")
    week_of_month: Optional[Annotated[int, Field(le=4, strict=True, ge=1)]] = Field(default=None, description="The week of the month to perform `monthly` frequency updates. Defaults to `null`.  - Required for `monthly` frequency updates.  - Must be `null` for `weekly` frequency updates.")
    __properties: ClassVar[List[str]] = ["day_of_week", "duration", "frequency", "hour_of_day", "week_of_month"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['weekly', 'monthly']):
            raise ValueError("must be one of enum values ('weekly', 'monthly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDatabasesInstances200ResponseAllOfDataInnerUpdates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if week_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.week_of_month is None and "week_of_month" in self.model_fields_set:
            _dict['week_of_month'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDatabasesInstances200ResponseAllOfDataInnerUpdates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day_of_week": obj.get("day_of_week"),
            "duration": obj.get("duration"),
            "frequency": obj.get("frequency") if obj.get("frequency") is not None else 'weekly',
            "hour_of_day": obj.get("hour_of_day"),
            "week_of_month": obj.get("week_of_month")
        })
        return _obj


