# coding: utf-8

"""
    Linode API

    [Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

    The version of the OpenAPI document: 4.189.2
    Contact: support@linode.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.get_linode_firewalls200_response_data_inner_rules_inbound_inner_addresses import GetLinodeFirewalls200ResponseDataInnerRulesInboundInnerAddresses
from typing import Optional, Set
from typing_extensions import Self

class GetLinodeFirewalls200ResponseDataInnerRulesInboundInner(BaseModel):
    """
    One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.")
    addresses: Optional[GetLinodeFirewalls200ResponseDataInnerRulesInboundInnerAddresses] = None
    description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="Used to describe this rule. For display purposes only.")
    label: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=32)]] = Field(default=None, description="Used to identify this rule. For display purposes only.")
    ports: Optional[StrictStr] = Field(default=None, description="A string representing the port or ports affected by this rule:  - The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma. - A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value. - Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port `080` is not allowed. - The ports string can have up to 15 _pieces_, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string \"22-24, 80, 443\" has four pieces. - If no ports are configured, all ports are affected. - Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.")
    protocol: Optional[StrictStr] = Field(default=None, description="The type of network traffic affected by this rule.")
    __properties: ClassVar[List[str]] = ["action", "addresses", "description", "label", "ports", "protocol"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCEPT', 'DROP']):
            raise ValueError("must be one of enum values ('ACCEPT', 'DROP')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TCP', 'UDP', 'ICMP', 'IPENCAP']):
            raise ValueError("must be one of enum values ('TCP', 'UDP', 'ICMP', 'IPENCAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLinodeFirewalls200ResponseDataInnerRulesInboundInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of addresses
        if self.addresses:
            _dict['addresses'] = self.addresses.to_dict()
        # set to None if ports (nullable) is None
        # and model_fields_set contains the field
        if self.ports is None and "ports" in self.model_fields_set:
            _dict['ports'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLinodeFirewalls200ResponseDataInnerRulesInboundInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "addresses": GetLinodeFirewalls200ResponseDataInnerRulesInboundInnerAddresses.from_dict(obj["addresses"]) if obj.get("addresses") is not None else None,
            "description": obj.get("description"),
            "label": obj.get("label"),
            "ports": obj.get("ports"),
            "protocol": obj.get("protocol")
        })
        return _obj


